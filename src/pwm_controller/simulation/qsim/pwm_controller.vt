// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/19/2018 02:33:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    pwm_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pwm_controller_vlg_sample_tst(
	clk,
	duty,
	enable,
	reset,
	set_duty,
	sampler_tx
);
input  clk;
input [7:0] duty;
input  enable;
input  reset;
input  set_duty;
output sampler_tx;

reg sample;
time current_time;
always @(clk or duty or enable or reset or set_duty)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module pwm_controller_vlg_check_tst (
	pulse,
	sampler_rx
);
input  pulse;
input sampler_rx;

reg  pulse_expected;

reg  pulse_prev;

reg  pulse_expected_prev;

reg  last_pulse_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	pulse_prev = pulse;
end

// update expected /o prevs

always @(trigger)
begin
	pulse_expected_prev = pulse_expected;
end



// expected pulse
initial
begin
	pulse_expected = 1'bX;
end 
// generate trigger
always @(pulse_expected or pulse)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pulse = %b | ",pulse_expected_prev);
	$display("| real pulse = %b | ",pulse_prev);
`endif
	if (
		( pulse_expected_prev !== 1'bx ) && ( pulse_prev !== pulse_expected_prev )
		&& ((pulse_expected_prev !== last_pulse_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pulse :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pulse_expected_prev);
		$display ("     Real value = %b", pulse_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pulse_exp = pulse_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module pwm_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] duty;
reg enable;
reg reset;
reg set_duty;
// wires                                               
wire pulse;

wire sampler;                             

// assign statements (if any)                          
pwm_controller i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.duty(duty),
	.enable(enable),
	.pulse(pulse),
	.reset(reset),
	.set_duty(set_duty)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// enable
initial
begin
	enable = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// set_duty
initial
begin
	set_duty = 1'b0;
	set_duty = #330000 1'b1;
	set_duty = #140000 1'b0;
	set_duty = #370000 1'b1;
	set_duty = #10000 1'b0;
end 
// duty[ 7 ]
initial
begin
	duty[7] = 1'b0;
	duty[7] = #460000 1'b1;
	duty[7] = #20000 1'b0;
	duty[7] = #350000 1'b1;
	duty[7] = #30000 1'b0;
end 
// duty[ 6 ]
initial
begin
	duty[6] = 1'b0;
	duty[6] = #460000 1'b1;
	duty[6] = #20000 1'b0;
	duty[6] = #350000 1'b1;
	duty[6] = #30000 1'b0;
end 
// duty[ 5 ]
initial
begin
	duty[5] = 1'b0;
	duty[5] = #460000 1'b1;
	duty[5] = #20000 1'b0;
	duty[5] = #350000 1'b1;
	duty[5] = #30000 1'b0;
end 
// duty[ 4 ]
initial
begin
	duty[4] = 1'b0;
	duty[4] = #460000 1'b1;
	duty[4] = #20000 1'b0;
	duty[4] = #350000 1'b1;
	duty[4] = #30000 1'b0;
end 
// duty[ 3 ]
initial
begin
	duty[3] = 1'b0;
	duty[3] = #460000 1'b1;
	duty[3] = #20000 1'b0;
	duty[3] = #350000 1'b1;
	duty[3] = #30000 1'b0;
end 
// duty[ 2 ]
initial
begin
	duty[2] = 1'b0;
	duty[2] = #290000 1'b1;
	duty[2] = #90000 1'b0;
	duty[2] = #80000 1'b1;
	duty[2] = #20000 1'b0;
	duty[2] = #350000 1'b1;
	duty[2] = #30000 1'b0;
end 
// duty[ 1 ]
initial
begin
	duty[1] = 1'b0;
	duty[1] = #290000 1'b1;
	duty[1] = #90000 1'b0;
	duty[1] = #80000 1'b1;
	duty[1] = #20000 1'b0;
	duty[1] = #350000 1'b1;
	duty[1] = #30000 1'b0;
end 
// duty[ 0 ]
initial
begin
	duty[0] = 1'b0;
	duty[0] = #290000 1'b1;
	duty[0] = #90000 1'b0;
	duty[0] = #80000 1'b1;
	duty[0] = #20000 1'b0;
	duty[0] = #350000 1'b1;
	duty[0] = #30000 1'b0;
end 

pwm_controller_vlg_sample_tst tb_sample (
	.clk(clk),
	.duty(duty),
	.enable(enable),
	.reset(reset),
	.set_duty(set_duty),
	.sampler_tx(sampler)
);

pwm_controller_vlg_check_tst tb_out(
	.pulse(pulse),
	.sampler_rx(sampler)
);
endmodule

