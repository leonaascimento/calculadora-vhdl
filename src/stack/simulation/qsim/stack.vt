// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/15/2018 17:17:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    stack
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module stack_vlg_sample_tst(
	clk,
	pop,
	push,
	push_value,
	reset,
	sampler_tx
);
input  clk;
input  pop;
input  push;
input [7:0] push_value;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or pop or push or push_value or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module stack_vlg_check_tst (
	empty,
	error,
	full,
	pop_first,
	pop_second,
	stack_status,
	sampler_rx
);
input  empty;
input  error;
input  full;
input [7:0] pop_first;
input [7:0] pop_second;
input [0:15] stack_status;
input sampler_rx;

reg  empty_expected;
reg  error_expected;
reg  full_expected;
reg [7:0] pop_first_expected;
reg [7:0] pop_second_expected;
reg [0:15] stack_status_expected;

reg  empty_prev;
reg  error_prev;
reg  full_prev;
reg [7:0] pop_first_prev;
reg [7:0] pop_second_prev;
reg [0:15] stack_status_prev;

reg  empty_expected_prev;
reg  error_expected_prev;
reg  full_expected_prev;
reg [7:0] pop_first_expected_prev;
reg [7:0] pop_second_expected_prev;
reg [0:15] stack_status_expected_prev;

reg  last_empty_exp;
reg  last_error_exp;
reg  last_full_exp;
reg [7:0] last_pop_first_exp;
reg [7:0] last_pop_second_exp;
reg [0:15] last_stack_status_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	empty_prev = empty;
	error_prev = error;
	full_prev = full;
	pop_first_prev = pop_first;
	pop_second_prev = pop_second;
	stack_status_prev = stack_status;
end

// update expected /o prevs

always @(trigger)
begin
	empty_expected_prev = empty_expected;
	error_expected_prev = error_expected;
	full_expected_prev = full_expected;
	pop_first_expected_prev = pop_first_expected;
	pop_second_expected_prev = pop_second_expected;
	stack_status_expected_prev = stack_status_expected;
end


// expected pop_first[ 7 ]
initial
begin
	pop_first_expected[7] = 1'bX;
end 
// expected pop_first[ 6 ]
initial
begin
	pop_first_expected[6] = 1'bX;
end 
// expected pop_first[ 5 ]
initial
begin
	pop_first_expected[5] = 1'bX;
end 
// expected pop_first[ 4 ]
initial
begin
	pop_first_expected[4] = 1'bX;
end 
// expected pop_first[ 3 ]
initial
begin
	pop_first_expected[3] = 1'bX;
end 
// expected pop_first[ 2 ]
initial
begin
	pop_first_expected[2] = 1'bX;
end 
// expected pop_first[ 1 ]
initial
begin
	pop_first_expected[1] = 1'bX;
end 
// expected pop_first[ 0 ]
initial
begin
	pop_first_expected[0] = 1'bX;
end 
// expected pop_second[ 7 ]
initial
begin
	pop_second_expected[7] = 1'bX;
end 
// expected pop_second[ 6 ]
initial
begin
	pop_second_expected[6] = 1'bX;
end 
// expected pop_second[ 5 ]
initial
begin
	pop_second_expected[5] = 1'bX;
end 
// expected pop_second[ 4 ]
initial
begin
	pop_second_expected[4] = 1'bX;
end 
// expected pop_second[ 3 ]
initial
begin
	pop_second_expected[3] = 1'bX;
end 
// expected pop_second[ 2 ]
initial
begin
	pop_second_expected[2] = 1'bX;
end 
// expected pop_second[ 1 ]
initial
begin
	pop_second_expected[1] = 1'bX;
end 
// expected pop_second[ 0 ]
initial
begin
	pop_second_expected[0] = 1'bX;
end 

// expected empty
initial
begin
	empty_expected = 1'bX;
end 

// expected full
initial
begin
	full_expected = 1'bX;
end 

// expected error
initial
begin
	error_expected = 1'bX;
end 
// expected stack_status[ 15 ]
initial
begin
	stack_status_expected[15] = 1'bX;
end 
// expected stack_status[ 14 ]
initial
begin
	stack_status_expected[14] = 1'bX;
end 
// expected stack_status[ 13 ]
initial
begin
	stack_status_expected[13] = 1'bX;
end 
// expected stack_status[ 12 ]
initial
begin
	stack_status_expected[12] = 1'bX;
end 
// expected stack_status[ 11 ]
initial
begin
	stack_status_expected[11] = 1'bX;
end 
// expected stack_status[ 10 ]
initial
begin
	stack_status_expected[10] = 1'bX;
end 
// expected stack_status[ 9 ]
initial
begin
	stack_status_expected[9] = 1'bX;
end 
// expected stack_status[ 8 ]
initial
begin
	stack_status_expected[8] = 1'bX;
end 
// expected stack_status[ 7 ]
initial
begin
	stack_status_expected[7] = 1'bX;
end 
// expected stack_status[ 6 ]
initial
begin
	stack_status_expected[6] = 1'bX;
end 
// expected stack_status[ 5 ]
initial
begin
	stack_status_expected[5] = 1'bX;
end 
// expected stack_status[ 4 ]
initial
begin
	stack_status_expected[4] = 1'bX;
end 
// expected stack_status[ 3 ]
initial
begin
	stack_status_expected[3] = 1'bX;
end 
// expected stack_status[ 2 ]
initial
begin
	stack_status_expected[2] = 1'bX;
end 
// expected stack_status[ 1 ]
initial
begin
	stack_status_expected[1] = 1'bX;
end 
// expected stack_status[ 0 ]
initial
begin
	stack_status_expected[0] = 1'bX;
end 
// generate trigger
always @(empty_expected or empty or error_expected or error or full_expected or full or pop_first_expected or pop_first or pop_second_expected or pop_second or stack_status_expected or stack_status)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected empty = %b | expected error = %b | expected full = %b | expected pop_first = %b | expected pop_second = %b | expected stack_status = %b | ",empty_expected_prev,error_expected_prev,full_expected_prev,pop_first_expected_prev,pop_second_expected_prev,stack_status_expected_prev);
	$display("| real empty = %b | real error = %b | real full = %b | real pop_first = %b | real pop_second = %b | real stack_status = %b | ",empty_prev,error_prev,full_prev,pop_first_prev,pop_second_prev,stack_status_prev);
`endif
	if (
		( empty_expected_prev !== 1'bx ) && ( empty_prev !== empty_expected_prev )
		&& ((empty_expected_prev !== last_empty_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", empty_expected_prev);
		$display ("     Real value = %b", empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_empty_exp = empty_expected_prev;
	end
	if (
		( error_expected_prev !== 1'bx ) && ( error_prev !== error_expected_prev )
		&& ((error_expected_prev !== last_error_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port error :: @time = %t",  $realtime);
		$display ("     Expected value = %b", error_expected_prev);
		$display ("     Real value = %b", error_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_error_exp = error_expected_prev;
	end
	if (
		( full_expected_prev !== 1'bx ) && ( full_prev !== full_expected_prev )
		&& ((full_expected_prev !== last_full_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full_expected_prev);
		$display ("     Real value = %b", full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_full_exp = full_expected_prev;
	end
	if (
		( pop_first_expected_prev[0] !== 1'bx ) && ( pop_first_prev[0] !== pop_first_expected_prev[0] )
		&& ((pop_first_expected_prev[0] !== last_pop_first_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_first[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_first_expected_prev);
		$display ("     Real value = %b", pop_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pop_first_exp[0] = pop_first_expected_prev[0];
	end
	if (
		( pop_first_expected_prev[1] !== 1'bx ) && ( pop_first_prev[1] !== pop_first_expected_prev[1] )
		&& ((pop_first_expected_prev[1] !== last_pop_first_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_first[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_first_expected_prev);
		$display ("     Real value = %b", pop_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pop_first_exp[1] = pop_first_expected_prev[1];
	end
	if (
		( pop_first_expected_prev[2] !== 1'bx ) && ( pop_first_prev[2] !== pop_first_expected_prev[2] )
		&& ((pop_first_expected_prev[2] !== last_pop_first_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_first[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_first_expected_prev);
		$display ("     Real value = %b", pop_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pop_first_exp[2] = pop_first_expected_prev[2];
	end
	if (
		( pop_first_expected_prev[3] !== 1'bx ) && ( pop_first_prev[3] !== pop_first_expected_prev[3] )
		&& ((pop_first_expected_prev[3] !== last_pop_first_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_first[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_first_expected_prev);
		$display ("     Real value = %b", pop_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pop_first_exp[3] = pop_first_expected_prev[3];
	end
	if (
		( pop_first_expected_prev[4] !== 1'bx ) && ( pop_first_prev[4] !== pop_first_expected_prev[4] )
		&& ((pop_first_expected_prev[4] !== last_pop_first_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_first[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_first_expected_prev);
		$display ("     Real value = %b", pop_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pop_first_exp[4] = pop_first_expected_prev[4];
	end
	if (
		( pop_first_expected_prev[5] !== 1'bx ) && ( pop_first_prev[5] !== pop_first_expected_prev[5] )
		&& ((pop_first_expected_prev[5] !== last_pop_first_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_first[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_first_expected_prev);
		$display ("     Real value = %b", pop_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pop_first_exp[5] = pop_first_expected_prev[5];
	end
	if (
		( pop_first_expected_prev[6] !== 1'bx ) && ( pop_first_prev[6] !== pop_first_expected_prev[6] )
		&& ((pop_first_expected_prev[6] !== last_pop_first_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_first[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_first_expected_prev);
		$display ("     Real value = %b", pop_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pop_first_exp[6] = pop_first_expected_prev[6];
	end
	if (
		( pop_first_expected_prev[7] !== 1'bx ) && ( pop_first_prev[7] !== pop_first_expected_prev[7] )
		&& ((pop_first_expected_prev[7] !== last_pop_first_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_first[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_first_expected_prev);
		$display ("     Real value = %b", pop_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_pop_first_exp[7] = pop_first_expected_prev[7];
	end
	if (
		( pop_second_expected_prev[0] !== 1'bx ) && ( pop_second_prev[0] !== pop_second_expected_prev[0] )
		&& ((pop_second_expected_prev[0] !== last_pop_second_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_second[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_second_expected_prev);
		$display ("     Real value = %b", pop_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pop_second_exp[0] = pop_second_expected_prev[0];
	end
	if (
		( pop_second_expected_prev[1] !== 1'bx ) && ( pop_second_prev[1] !== pop_second_expected_prev[1] )
		&& ((pop_second_expected_prev[1] !== last_pop_second_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_second[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_second_expected_prev);
		$display ("     Real value = %b", pop_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pop_second_exp[1] = pop_second_expected_prev[1];
	end
	if (
		( pop_second_expected_prev[2] !== 1'bx ) && ( pop_second_prev[2] !== pop_second_expected_prev[2] )
		&& ((pop_second_expected_prev[2] !== last_pop_second_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_second[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_second_expected_prev);
		$display ("     Real value = %b", pop_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pop_second_exp[2] = pop_second_expected_prev[2];
	end
	if (
		( pop_second_expected_prev[3] !== 1'bx ) && ( pop_second_prev[3] !== pop_second_expected_prev[3] )
		&& ((pop_second_expected_prev[3] !== last_pop_second_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_second[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_second_expected_prev);
		$display ("     Real value = %b", pop_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pop_second_exp[3] = pop_second_expected_prev[3];
	end
	if (
		( pop_second_expected_prev[4] !== 1'bx ) && ( pop_second_prev[4] !== pop_second_expected_prev[4] )
		&& ((pop_second_expected_prev[4] !== last_pop_second_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_second[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_second_expected_prev);
		$display ("     Real value = %b", pop_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pop_second_exp[4] = pop_second_expected_prev[4];
	end
	if (
		( pop_second_expected_prev[5] !== 1'bx ) && ( pop_second_prev[5] !== pop_second_expected_prev[5] )
		&& ((pop_second_expected_prev[5] !== last_pop_second_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_second[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_second_expected_prev);
		$display ("     Real value = %b", pop_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pop_second_exp[5] = pop_second_expected_prev[5];
	end
	if (
		( pop_second_expected_prev[6] !== 1'bx ) && ( pop_second_prev[6] !== pop_second_expected_prev[6] )
		&& ((pop_second_expected_prev[6] !== last_pop_second_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_second[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_second_expected_prev);
		$display ("     Real value = %b", pop_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pop_second_exp[6] = pop_second_expected_prev[6];
	end
	if (
		( pop_second_expected_prev[7] !== 1'bx ) && ( pop_second_prev[7] !== pop_second_expected_prev[7] )
		&& ((pop_second_expected_prev[7] !== last_pop_second_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop_second[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_second_expected_prev);
		$display ("     Real value = %b", pop_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_pop_second_exp[7] = pop_second_expected_prev[7];
	end
	if (
		( stack_status_expected_prev[0] !== 1'bx ) && ( stack_status_prev[0] !== stack_status_expected_prev[0] )
		&& ((stack_status_expected_prev[0] !== last_stack_status_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[0] = stack_status_expected_prev[0];
	end
	if (
		( stack_status_expected_prev[1] !== 1'bx ) && ( stack_status_prev[1] !== stack_status_expected_prev[1] )
		&& ((stack_status_expected_prev[1] !== last_stack_status_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[1] = stack_status_expected_prev[1];
	end
	if (
		( stack_status_expected_prev[2] !== 1'bx ) && ( stack_status_prev[2] !== stack_status_expected_prev[2] )
		&& ((stack_status_expected_prev[2] !== last_stack_status_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[2] = stack_status_expected_prev[2];
	end
	if (
		( stack_status_expected_prev[3] !== 1'bx ) && ( stack_status_prev[3] !== stack_status_expected_prev[3] )
		&& ((stack_status_expected_prev[3] !== last_stack_status_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[3] = stack_status_expected_prev[3];
	end
	if (
		( stack_status_expected_prev[4] !== 1'bx ) && ( stack_status_prev[4] !== stack_status_expected_prev[4] )
		&& ((stack_status_expected_prev[4] !== last_stack_status_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[4] = stack_status_expected_prev[4];
	end
	if (
		( stack_status_expected_prev[5] !== 1'bx ) && ( stack_status_prev[5] !== stack_status_expected_prev[5] )
		&& ((stack_status_expected_prev[5] !== last_stack_status_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[5] = stack_status_expected_prev[5];
	end
	if (
		( stack_status_expected_prev[6] !== 1'bx ) && ( stack_status_prev[6] !== stack_status_expected_prev[6] )
		&& ((stack_status_expected_prev[6] !== last_stack_status_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[6] = stack_status_expected_prev[6];
	end
	if (
		( stack_status_expected_prev[7] !== 1'bx ) && ( stack_status_prev[7] !== stack_status_expected_prev[7] )
		&& ((stack_status_expected_prev[7] !== last_stack_status_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[7] = stack_status_expected_prev[7];
	end
	if (
		( stack_status_expected_prev[8] !== 1'bx ) && ( stack_status_prev[8] !== stack_status_expected_prev[8] )
		&& ((stack_status_expected_prev[8] !== last_stack_status_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[8] = stack_status_expected_prev[8];
	end
	if (
		( stack_status_expected_prev[9] !== 1'bx ) && ( stack_status_prev[9] !== stack_status_expected_prev[9] )
		&& ((stack_status_expected_prev[9] !== last_stack_status_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[9] = stack_status_expected_prev[9];
	end
	if (
		( stack_status_expected_prev[10] !== 1'bx ) && ( stack_status_prev[10] !== stack_status_expected_prev[10] )
		&& ((stack_status_expected_prev[10] !== last_stack_status_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[10] = stack_status_expected_prev[10];
	end
	if (
		( stack_status_expected_prev[11] !== 1'bx ) && ( stack_status_prev[11] !== stack_status_expected_prev[11] )
		&& ((stack_status_expected_prev[11] !== last_stack_status_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[11] = stack_status_expected_prev[11];
	end
	if (
		( stack_status_expected_prev[12] !== 1'bx ) && ( stack_status_prev[12] !== stack_status_expected_prev[12] )
		&& ((stack_status_expected_prev[12] !== last_stack_status_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[12] = stack_status_expected_prev[12];
	end
	if (
		( stack_status_expected_prev[13] !== 1'bx ) && ( stack_status_prev[13] !== stack_status_expected_prev[13] )
		&& ((stack_status_expected_prev[13] !== last_stack_status_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[13] = stack_status_expected_prev[13];
	end
	if (
		( stack_status_expected_prev[14] !== 1'bx ) && ( stack_status_prev[14] !== stack_status_expected_prev[14] )
		&& ((stack_status_expected_prev[14] !== last_stack_status_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[14] = stack_status_expected_prev[14];
	end
	if (
		( stack_status_expected_prev[15] !== 1'bx ) && ( stack_status_prev[15] !== stack_status_expected_prev[15] )
		&& ((stack_status_expected_prev[15] !== last_stack_status_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_status[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_status_expected_prev);
		$display ("     Real value = %b", stack_status_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_stack_status_exp[15] = stack_status_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module stack_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg pop;
reg push;
reg [7:0] push_value;
reg reset;
// wires                                               
wire empty;
wire error;
wire full;
wire [7:0] pop_first;
wire [7:0] pop_second;
wire [0:15] stack_status;

wire sampler;                             

// assign statements (if any)                          
stack i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.empty(empty),
	.error(error),
	.full(full),
	.pop(pop),
	.pop_first(pop_first),
	.pop_second(pop_second),
	.push(push),
	.push_value(push_value),
	.reset(reset),
	.stack_status(stack_status)
);

// clk
initial
begin
	clk = 1'b1;
	# 10000;
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

// push
initial
begin
	push = 1'b0;
	push = #10000 1'b1;
	push = #10000 1'b0;
	push = #10000 1'b1;
	push = #10000 1'b0;
	push = #10000 1'b1;
	push = #10000 1'b0;
	push = #10000 1'b1;
	push = #10000 1'b0;
	push = #130000 1'b1;
	push = #10000 1'b0;
	push = #10000 1'b1;
	push = #10000 1'b0;
	push = #10000 1'b1;
	push = #10000 1'b0;
	push = #10000 1'b1;
	push = #10000 1'b0;
end 

// pop
initial
begin
	pop = 1'b0;
	pop = #90000 1'b1;
	pop = #10000 1'b0;
	pop = #10000 1'b1;
	pop = #10000 1'b0;
	pop = #10000 1'b1;
	pop = #10000 1'b0;
	pop = #10000 1'b1;
	pop = #10000 1'b0;
	pop = #30000 1'b1;
	pop = #10000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #170000 1'b1;
	reset = #10000 1'b0;
end 
// push_value[ 7 ]
initial
begin
	push_value[7] = 1'b0;
	push_value[7] = #10000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #20000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #10000 1'b1;
	push_value[7] = #30000 1'b0;
	push_value[7] = #60000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #30000 1'b1;
	push_value[7] = #20000 1'b0;
	push_value[7] = #30000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #10000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #20000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #10000 1'b1;
	push_value[7] = #30000 1'b0;
	push_value[7] = #20000 1'b1;
	push_value[7] = #40000 1'b0;
	push_value[7] = #20000 1'b1;
	push_value[7] = #30000 1'b0;
	push_value[7] = #90000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #10000 1'b1;
	push_value[7] = #50000 1'b0;
	push_value[7] = #20000 1'b1;
	push_value[7] = #30000 1'b0;
	push_value[7] = #10000 1'b1;
	push_value[7] = #20000 1'b0;
	push_value[7] = #10000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #10000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #10000 1'b1;
	push_value[7] = #20000 1'b0;
	push_value[7] = #30000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #20000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #10000 1'b1;
	push_value[7] = #10000 1'b0;
	push_value[7] = #10000 1'b1;
	push_value[7] = #30000 1'b0;
	push_value[7] = #20000 1'b1;
	push_value[7] = #30000 1'b0;
	push_value[7] = #20000 1'b1;
	push_value[7] = #10000 1'b0;
end 
// push_value[ 6 ]
initial
begin
	push_value[6] = 1'b1;
	push_value[6] = #30000 1'b0;
	push_value[6] = #20000 1'b1;
	push_value[6] = #30000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #30000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #20000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #20000 1'b1;
	push_value[6] = #20000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #30000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #20000 1'b0;
	push_value[6] = #20000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #20000 1'b0;
	push_value[6] = #20000 1'b1;
	push_value[6] = #70000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #40000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #10000 1'b0;
	push_value[6] = #20000 1'b1;
	push_value[6] = #70000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #40000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #20000 1'b0;
	push_value[6] = #30000 1'b1;
	push_value[6] = #30000 1'b0;
	push_value[6] = #20000 1'b1;
	push_value[6] = #20000 1'b0;
	push_value[6] = #10000 1'b1;
	push_value[6] = #20000 1'b0;
end 
// push_value[ 5 ]
initial
begin
	push_value[5] = 1'b1;
	push_value[5] = #30000 1'b0;
	push_value[5] = #20000 1'b1;
	push_value[5] = #30000 1'b0;
	push_value[5] = #10000 1'b1;
	push_value[5] = #10000 1'b0;
	push_value[5] = #20000 1'b1;
	push_value[5] = #40000 1'b0;
	push_value[5] = #20000 1'b1;
	push_value[5] = #30000 1'b0;
	push_value[5] = #20000 1'b1;
	push_value[5] = #20000 1'b0;
	push_value[5] = #20000 1'b1;
	push_value[5] = #40000 1'b0;
	push_value[5] = #20000 1'b1;
	push_value[5] = #30000 1'b0;
	push_value[5] = #10000 1'b1;
	push_value[5] = #30000 1'b0;
	push_value[5] = #30000 1'b1;
	push_value[5] = #20000 1'b0;
	push_value[5] = #60000 1'b1;
	push_value[5] = #20000 1'b0;
	push_value[5] = #20000 1'b1;
	push_value[5] = #20000 1'b0;
	push_value[5] = #20000 1'b1;
	push_value[5] = #10000 1'b0;
	push_value[5] = #20000 1'b1;
	push_value[5] = #20000 1'b0;
	push_value[5] = #30000 1'b1;
	push_value[5] = #20000 1'b0;
	push_value[5] = #20000 1'b1;
	push_value[5] = #70000 1'b0;
	push_value[5] = #10000 1'b1;
	push_value[5] = #10000 1'b0;
	push_value[5] = #10000 1'b1;
	push_value[5] = #20000 1'b0;
	push_value[5] = #30000 1'b1;
	push_value[5] = #10000 1'b0;
	push_value[5] = #20000 1'b1;
	push_value[5] = #20000 1'b0;
	push_value[5] = #30000 1'b1;
	push_value[5] = #30000 1'b0;
	push_value[5] = #10000 1'b1;
end 
// push_value[ 4 ]
initial
begin
	push_value[4] = 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #30000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #20000 1'b0;
	push_value[4] = #20000 1'b1;
	push_value[4] = #30000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #40000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #30000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #20000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #20000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #20000 1'b1;
	push_value[4] = #40000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #50000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #20000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #30000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #50000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #20000 1'b1;
	push_value[4] = #20000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #20000 1'b1;
	push_value[4] = #30000 1'b0;
	push_value[4] = #120000 1'b1;
	push_value[4] = #30000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #10000 1'b0;
	push_value[4] = #10000 1'b1;
	push_value[4] = #20000 1'b0;
	push_value[4] = #10000 1'b1;
end 
// push_value[ 3 ]
initial
begin
	push_value[3] = 1'b0;
	push_value[3] = #20000 1'b1;
	push_value[3] = #20000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #30000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #40000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #30000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #10000 1'b0;
	push_value[3] = #50000 1'b1;
	push_value[3] = #10000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #30000 1'b0;
	push_value[3] = #30000 1'b1;
	push_value[3] = #10000 1'b0;
	push_value[3] = #30000 1'b1;
	push_value[3] = #30000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #20000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #30000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #10000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #10000 1'b0;
	push_value[3] = #20000 1'b1;
	push_value[3] = #10000 1'b0;
	push_value[3] = #20000 1'b1;
	push_value[3] = #40000 1'b0;
	push_value[3] = #30000 1'b1;
	push_value[3] = #20000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #10000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #30000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #10000 1'b0;
	push_value[3] = #20000 1'b1;
	push_value[3] = #20000 1'b0;
	push_value[3] = #40000 1'b1;
	push_value[3] = #20000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #10000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #10000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #20000 1'b0;
	push_value[3] = #30000 1'b1;
	push_value[3] = #10000 1'b0;
	push_value[3] = #10000 1'b1;
	push_value[3] = #40000 1'b0;
	push_value[3] = #10000 1'b1;
end 
// push_value[ 2 ]
initial
begin
	push_value[2] = 1'b0;
	push_value[2] = #10000 1'b1;
	push_value[2] = #30000 1'b0;
	push_value[2] = #30000 1'b1;
	push_value[2] = #10000 1'b0;
	push_value[2] = #130000 1'b1;
	push_value[2] = #30000 1'b0;
	push_value[2] = #20000 1'b1;
	push_value[2] = #10000 1'b0;
	push_value[2] = #30000 1'b1;
	push_value[2] = #20000 1'b0;
	push_value[2] = #10000 1'b1;
	push_value[2] = #20000 1'b0;
	push_value[2] = #10000 1'b1;
	push_value[2] = #10000 1'b0;
	push_value[2] = #20000 1'b1;
	push_value[2] = #30000 1'b0;
	push_value[2] = #20000 1'b1;
	push_value[2] = #40000 1'b0;
	push_value[2] = #10000 1'b1;
	push_value[2] = #30000 1'b0;
	push_value[2] = #20000 1'b1;
	push_value[2] = #30000 1'b0;
	push_value[2] = #30000 1'b1;
	push_value[2] = #20000 1'b0;
	push_value[2] = #30000 1'b1;
	push_value[2] = #30000 1'b0;
	push_value[2] = #40000 1'b1;
	push_value[2] = #40000 1'b0;
	push_value[2] = #20000 1'b1;
	push_value[2] = #20000 1'b0;
	push_value[2] = #30000 1'b1;
	push_value[2] = #10000 1'b0;
	push_value[2] = #10000 1'b1;
	push_value[2] = #10000 1'b0;
	push_value[2] = #20000 1'b1;
	push_value[2] = #10000 1'b0;
	push_value[2] = #10000 1'b1;
	push_value[2] = #10000 1'b0;
	push_value[2] = #60000 1'b1;
end 
// push_value[ 1 ]
initial
begin
	push_value[1] = 1'b1;
	push_value[1] = #50000 1'b0;
	push_value[1] = #20000 1'b1;
	push_value[1] = #60000 1'b0;
	push_value[1] = #20000 1'b1;
	push_value[1] = #10000 1'b0;
	push_value[1] = #10000 1'b1;
	push_value[1] = #30000 1'b0;
	push_value[1] = #30000 1'b1;
	push_value[1] = #60000 1'b0;
	push_value[1] = #70000 1'b1;
	push_value[1] = #20000 1'b0;
	push_value[1] = #10000 1'b1;
	push_value[1] = #20000 1'b0;
	push_value[1] = #20000 1'b1;
	push_value[1] = #30000 1'b0;
	push_value[1] = #40000 1'b1;
	push_value[1] = #20000 1'b0;
	push_value[1] = #30000 1'b1;
	push_value[1] = #30000 1'b0;
	push_value[1] = #10000 1'b1;
	push_value[1] = #10000 1'b0;
	push_value[1] = #10000 1'b1;
	push_value[1] = #20000 1'b0;
	push_value[1] = #10000 1'b1;
	push_value[1] = #10000 1'b0;
	push_value[1] = #10000 1'b1;
	push_value[1] = #10000 1'b0;
	push_value[1] = #20000 1'b1;
	push_value[1] = #10000 1'b0;
	push_value[1] = #40000 1'b1;
	push_value[1] = #20000 1'b0;
	push_value[1] = #10000 1'b1;
	push_value[1] = #10000 1'b0;
	push_value[1] = #40000 1'b1;
	push_value[1] = #30000 1'b0;
	push_value[1] = #10000 1'b1;
	push_value[1] = #20000 1'b0;
	push_value[1] = #40000 1'b1;
	push_value[1] = #30000 1'b0;
	push_value[1] = #10000 1'b1;
	push_value[1] = #20000 1'b0;
end 
// push_value[ 0 ]
initial
begin
	push_value[0] = 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #20000 1'b0;
	push_value[0] = #20000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #20000 1'b1;
	push_value[0] = #40000 1'b0;
	push_value[0] = #20000 1'b1;
	push_value[0] = #30000 1'b0;
	push_value[0] = #80000 1'b1;
	push_value[0] = #20000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #20000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #30000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #20000 1'b1;
	push_value[0] = #20000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #40000 1'b0;
	push_value[0] = #20000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #20000 1'b1;
	push_value[0] = #20000 1'b0;
	push_value[0] = #20000 1'b1;
	push_value[0] = #20000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #70000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #30000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #30000 1'b0;
	push_value[0] = #30000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #20000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #20000 1'b1;
	push_value[0] = #20000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #20000 1'b1;
	push_value[0] = #10000 1'b0;
	push_value[0] = #10000 1'b1;
	push_value[0] = #10000 1'b0;
end 

stack_vlg_sample_tst tb_sample (
	.clk(clk),
	.pop(pop),
	.push(push),
	.push_value(push_value),
	.reset(reset),
	.sampler_tx(sampler)
);

stack_vlg_check_tst tb_out(
	.empty(empty),
	.error(error),
	.full(full),
	.pop_first(pop_first),
	.pop_second(pop_second),
	.stack_status(stack_status),
	.sampler_rx(sampler)
);
endmodule

