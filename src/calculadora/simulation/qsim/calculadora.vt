// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/17/2018 09:46:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    calculadora
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module calculadora_vlg_sample_tst(
	clk,
	operand,
	operator,
	reset,
	set_operand,
	sampler_tx
);
input  clk;
input [7:0] operand;
input [3:0] operator;
input  reset;
input  set_operand;
output sampler_tx;

reg sample;
time current_time;
always @(clk or operand or operator or reset or set_operand)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module calculadora_vlg_check_tst (
	aux_first,
	aux_result,
	aux_second,
	op,
	overflow,
	result,
	set_operator,
	sampler_rx
);
input [7:0] aux_first;
input [7:0] aux_result;
input [7:0] aux_second;
input [1:0] op;
input  overflow;
input [7:0] result;
input  set_operator;
input sampler_rx;

reg [7:0] aux_first_expected;
reg [7:0] aux_result_expected;
reg [7:0] aux_second_expected;
reg [1:0] op_expected;
reg  overflow_expected;
reg [7:0] result_expected;
reg  set_operator_expected;

reg [7:0] aux_first_prev;
reg [7:0] aux_result_prev;
reg [7:0] aux_second_prev;
reg [1:0] op_prev;
reg  overflow_prev;
reg [7:0] result_prev;
reg  set_operator_prev;

reg [7:0] aux_first_expected_prev;
reg [7:0] aux_result_expected_prev;
reg [7:0] aux_second_expected_prev;
reg [1:0] op_expected_prev;
reg  overflow_expected_prev;
reg [7:0] result_expected_prev;
reg  set_operator_expected_prev;

reg [7:0] last_aux_first_exp;
reg [7:0] last_aux_result_exp;
reg [7:0] last_aux_second_exp;
reg [1:0] last_op_exp;
reg  last_overflow_exp;
reg [7:0] last_result_exp;
reg  last_set_operator_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	aux_first_prev = aux_first;
	aux_result_prev = aux_result;
	aux_second_prev = aux_second;
	op_prev = op;
	overflow_prev = overflow;
	result_prev = result;
	set_operator_prev = set_operator;
end

// update expected /o prevs

always @(trigger)
begin
	aux_first_expected_prev = aux_first_expected;
	aux_result_expected_prev = aux_result_expected;
	aux_second_expected_prev = aux_second_expected;
	op_expected_prev = op_expected;
	overflow_expected_prev = overflow_expected;
	result_expected_prev = result_expected;
	set_operator_expected_prev = set_operator_expected;
end



// expected result[7]
initial
begin
	result_expected[7] = 1'bX;
end 

// expected result[6]
initial
begin
	result_expected[6] = 1'bX;
end 

// expected result[5]
initial
begin
	result_expected[5] = 1'bX;
end 

// expected result[4]
initial
begin
	result_expected[4] = 1'bX;
end 

// expected result[3]
initial
begin
	result_expected[3] = 1'bX;
end 

// expected result[2]
initial
begin
	result_expected[2] = 1'bX;
end 

// expected result[1]
initial
begin
	result_expected[1] = 1'bX;
end 

// expected result[0]
initial
begin
	result_expected[0] = 1'bX;
end 

// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 
// expected op[ 1 ]
initial
begin
	op_expected[1] = 1'bX;
end 
// expected op[ 0 ]
initial
begin
	op_expected[0] = 1'bX;
end 

// expected set_operator
initial
begin
	set_operator_expected = 1'bX;
end 
// expected aux_first[ 7 ]
initial
begin
	aux_first_expected[7] = 1'bX;
end 
// expected aux_first[ 6 ]
initial
begin
	aux_first_expected[6] = 1'bX;
end 
// expected aux_first[ 5 ]
initial
begin
	aux_first_expected[5] = 1'bX;
end 
// expected aux_first[ 4 ]
initial
begin
	aux_first_expected[4] = 1'bX;
end 
// expected aux_first[ 3 ]
initial
begin
	aux_first_expected[3] = 1'bX;
end 
// expected aux_first[ 2 ]
initial
begin
	aux_first_expected[2] = 1'bX;
end 
// expected aux_first[ 1 ]
initial
begin
	aux_first_expected[1] = 1'bX;
end 
// expected aux_first[ 0 ]
initial
begin
	aux_first_expected[0] = 1'bX;
end 
// expected aux_second[ 7 ]
initial
begin
	aux_second_expected[7] = 1'bX;
end 
// expected aux_second[ 6 ]
initial
begin
	aux_second_expected[6] = 1'bX;
end 
// expected aux_second[ 5 ]
initial
begin
	aux_second_expected[5] = 1'bX;
end 
// expected aux_second[ 4 ]
initial
begin
	aux_second_expected[4] = 1'bX;
end 
// expected aux_second[ 3 ]
initial
begin
	aux_second_expected[3] = 1'bX;
end 
// expected aux_second[ 2 ]
initial
begin
	aux_second_expected[2] = 1'bX;
end 
// expected aux_second[ 1 ]
initial
begin
	aux_second_expected[1] = 1'bX;
end 
// expected aux_second[ 0 ]
initial
begin
	aux_second_expected[0] = 1'bX;
end 
// expected aux_result[ 7 ]
initial
begin
	aux_result_expected[7] = 1'bX;
end 
// expected aux_result[ 6 ]
initial
begin
	aux_result_expected[6] = 1'bX;
end 
// expected aux_result[ 5 ]
initial
begin
	aux_result_expected[5] = 1'bX;
end 
// expected aux_result[ 4 ]
initial
begin
	aux_result_expected[4] = 1'bX;
end 
// expected aux_result[ 3 ]
initial
begin
	aux_result_expected[3] = 1'bX;
end 
// expected aux_result[ 2 ]
initial
begin
	aux_result_expected[2] = 1'bX;
end 
// expected aux_result[ 1 ]
initial
begin
	aux_result_expected[1] = 1'bX;
end 
// expected aux_result[ 0 ]
initial
begin
	aux_result_expected[0] = 1'bX;
end 
// generate trigger
always @(aux_first_expected or aux_first or aux_result_expected or aux_result or aux_second_expected or aux_second or op_expected or op or overflow_expected or overflow or result_expected or result or set_operator_expected or set_operator)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aux_first = %b | expected aux_result = %b | expected aux_second = %b | expected op = %b | expected overflow = %b | expected result = %b | expected set_operator = %b | ",aux_first_expected_prev,aux_result_expected_prev,aux_second_expected_prev,op_expected_prev,overflow_expected_prev,result_expected_prev,set_operator_expected_prev);
	$display("| real aux_first = %b | real aux_result = %b | real aux_second = %b | real op = %b | real overflow = %b | real result = %b | real set_operator = %b | ",aux_first_prev,aux_result_prev,aux_second_prev,op_prev,overflow_prev,result_prev,set_operator_prev);
`endif
	if (
		( aux_first_expected_prev[0] !== 1'bx ) && ( aux_first_prev[0] !== aux_first_expected_prev[0] )
		&& ((aux_first_expected_prev[0] !== last_aux_first_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[0] = aux_first_expected_prev[0];
	end
	if (
		( aux_first_expected_prev[1] !== 1'bx ) && ( aux_first_prev[1] !== aux_first_expected_prev[1] )
		&& ((aux_first_expected_prev[1] !== last_aux_first_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[1] = aux_first_expected_prev[1];
	end
	if (
		( aux_first_expected_prev[2] !== 1'bx ) && ( aux_first_prev[2] !== aux_first_expected_prev[2] )
		&& ((aux_first_expected_prev[2] !== last_aux_first_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[2] = aux_first_expected_prev[2];
	end
	if (
		( aux_first_expected_prev[3] !== 1'bx ) && ( aux_first_prev[3] !== aux_first_expected_prev[3] )
		&& ((aux_first_expected_prev[3] !== last_aux_first_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[3] = aux_first_expected_prev[3];
	end
	if (
		( aux_first_expected_prev[4] !== 1'bx ) && ( aux_first_prev[4] !== aux_first_expected_prev[4] )
		&& ((aux_first_expected_prev[4] !== last_aux_first_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[4] = aux_first_expected_prev[4];
	end
	if (
		( aux_first_expected_prev[5] !== 1'bx ) && ( aux_first_prev[5] !== aux_first_expected_prev[5] )
		&& ((aux_first_expected_prev[5] !== last_aux_first_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[5] = aux_first_expected_prev[5];
	end
	if (
		( aux_first_expected_prev[6] !== 1'bx ) && ( aux_first_prev[6] !== aux_first_expected_prev[6] )
		&& ((aux_first_expected_prev[6] !== last_aux_first_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[6] = aux_first_expected_prev[6];
	end
	if (
		( aux_first_expected_prev[7] !== 1'bx ) && ( aux_first_prev[7] !== aux_first_expected_prev[7] )
		&& ((aux_first_expected_prev[7] !== last_aux_first_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[7] = aux_first_expected_prev[7];
	end
	if (
		( aux_result_expected_prev[0] !== 1'bx ) && ( aux_result_prev[0] !== aux_result_expected_prev[0] )
		&& ((aux_result_expected_prev[0] !== last_aux_result_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[0] = aux_result_expected_prev[0];
	end
	if (
		( aux_result_expected_prev[1] !== 1'bx ) && ( aux_result_prev[1] !== aux_result_expected_prev[1] )
		&& ((aux_result_expected_prev[1] !== last_aux_result_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[1] = aux_result_expected_prev[1];
	end
	if (
		( aux_result_expected_prev[2] !== 1'bx ) && ( aux_result_prev[2] !== aux_result_expected_prev[2] )
		&& ((aux_result_expected_prev[2] !== last_aux_result_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[2] = aux_result_expected_prev[2];
	end
	if (
		( aux_result_expected_prev[3] !== 1'bx ) && ( aux_result_prev[3] !== aux_result_expected_prev[3] )
		&& ((aux_result_expected_prev[3] !== last_aux_result_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[3] = aux_result_expected_prev[3];
	end
	if (
		( aux_result_expected_prev[4] !== 1'bx ) && ( aux_result_prev[4] !== aux_result_expected_prev[4] )
		&& ((aux_result_expected_prev[4] !== last_aux_result_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[4] = aux_result_expected_prev[4];
	end
	if (
		( aux_result_expected_prev[5] !== 1'bx ) && ( aux_result_prev[5] !== aux_result_expected_prev[5] )
		&& ((aux_result_expected_prev[5] !== last_aux_result_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[5] = aux_result_expected_prev[5];
	end
	if (
		( aux_result_expected_prev[6] !== 1'bx ) && ( aux_result_prev[6] !== aux_result_expected_prev[6] )
		&& ((aux_result_expected_prev[6] !== last_aux_result_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[6] = aux_result_expected_prev[6];
	end
	if (
		( aux_result_expected_prev[7] !== 1'bx ) && ( aux_result_prev[7] !== aux_result_expected_prev[7] )
		&& ((aux_result_expected_prev[7] !== last_aux_result_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[7] = aux_result_expected_prev[7];
	end
	if (
		( aux_second_expected_prev[0] !== 1'bx ) && ( aux_second_prev[0] !== aux_second_expected_prev[0] )
		&& ((aux_second_expected_prev[0] !== last_aux_second_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[0] = aux_second_expected_prev[0];
	end
	if (
		( aux_second_expected_prev[1] !== 1'bx ) && ( aux_second_prev[1] !== aux_second_expected_prev[1] )
		&& ((aux_second_expected_prev[1] !== last_aux_second_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[1] = aux_second_expected_prev[1];
	end
	if (
		( aux_second_expected_prev[2] !== 1'bx ) && ( aux_second_prev[2] !== aux_second_expected_prev[2] )
		&& ((aux_second_expected_prev[2] !== last_aux_second_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[2] = aux_second_expected_prev[2];
	end
	if (
		( aux_second_expected_prev[3] !== 1'bx ) && ( aux_second_prev[3] !== aux_second_expected_prev[3] )
		&& ((aux_second_expected_prev[3] !== last_aux_second_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[3] = aux_second_expected_prev[3];
	end
	if (
		( aux_second_expected_prev[4] !== 1'bx ) && ( aux_second_prev[4] !== aux_second_expected_prev[4] )
		&& ((aux_second_expected_prev[4] !== last_aux_second_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[4] = aux_second_expected_prev[4];
	end
	if (
		( aux_second_expected_prev[5] !== 1'bx ) && ( aux_second_prev[5] !== aux_second_expected_prev[5] )
		&& ((aux_second_expected_prev[5] !== last_aux_second_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[5] = aux_second_expected_prev[5];
	end
	if (
		( aux_second_expected_prev[6] !== 1'bx ) && ( aux_second_prev[6] !== aux_second_expected_prev[6] )
		&& ((aux_second_expected_prev[6] !== last_aux_second_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[6] = aux_second_expected_prev[6];
	end
	if (
		( aux_second_expected_prev[7] !== 1'bx ) && ( aux_second_prev[7] !== aux_second_expected_prev[7] )
		&& ((aux_second_expected_prev[7] !== last_aux_second_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[7] = aux_second_expected_prev[7];
	end
	if (
		( op_expected_prev[0] !== 1'bx ) && ( op_prev[0] !== op_expected_prev[0] )
		&& ((op_expected_prev[0] !== last_op_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_expected_prev);
		$display ("     Real value = %b", op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_op_exp[0] = op_expected_prev[0];
	end
	if (
		( op_expected_prev[1] !== 1'bx ) && ( op_prev[1] !== op_expected_prev[1] )
		&& ((op_expected_prev[1] !== last_op_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_expected_prev);
		$display ("     Real value = %b", op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_op_exp[1] = op_expected_prev[1];
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( set_operator_expected_prev !== 1'bx ) && ( set_operator_prev !== set_operator_expected_prev )
		&& ((set_operator_expected_prev !== last_set_operator_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port set_operator :: @time = %t",  $realtime);
		$display ("     Expected value = %b", set_operator_expected_prev);
		$display ("     Real value = %b", set_operator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_set_operator_exp = set_operator_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module calculadora_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] operand;
reg [3:0] operator;
reg reset;
reg set_operand;
// wires                                               
wire [7:0] aux_first;
wire [7:0] aux_result;
wire [7:0] aux_second;
wire [1:0] op;
wire overflow;
wire [7:0] result;
wire set_operator;

wire sampler;                             

// assign statements (if any)                          
calculadora i1 (
// port map - connection between master ports and signals/registers   
	.aux_first(aux_first),
	.aux_result(aux_result),
	.aux_second(aux_second),
	.clk(clk),
	.op(op),
	.operand(operand),
	.operator(operator),
	.overflow(overflow),
	.reset(reset),
	.result(result),
	.set_operand(set_operand),
	.set_operator(set_operator)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// set_operand
initial
begin
	set_operand = 1'b0;
	set_operand = #20000 1'b1;
	set_operand = #50000 1'b0;
	set_operand = #20000 1'b1;
	set_operand = #60000 1'b0;
	set_operand = #30000 1'b1;
	set_operand = #50000 1'b0;
end 
// operand[ 7 ]
initial
begin
	operand[7] = 1'b0;
end 
// operand[ 6 ]
initial
begin
	operand[6] = 1'b0;
end 
// operand[ 5 ]
initial
begin
	operand[5] = 1'b0;
end 
// operand[ 4 ]
initial
begin
	operand[4] = 1'b0;
end 
// operand[ 3 ]
initial
begin
	operand[3] = 1'b1;
	operand[3] = #50000 1'b0;
	operand[3] = #100000 1'b1;
	operand[3] = #50000 1'b0;
	operand[3] = #50000 1'b1;
	operand[3] = #100000 1'b0;
	operand[3] = #50000 1'b1;
	operand[3] = #200000 1'b0;
	operand[3] = #50000 1'b1;
	operand[3] = #50000 1'b0;
	operand[3] = #150000 1'b1;
end 
// operand[ 2 ]
initial
begin
	operand[2] = 1'b0;
	operand[2] = #50000 1'b1;
	operand[2] = #100000 1'b0;
	operand[2] = #50000 1'b1;
	operand[2] = #50000 1'b0;
	operand[2] = #200000 1'b1;
	operand[2] = #100000 1'b0;
	operand[2] = #50000 1'b1;
	operand[2] = #200000 1'b0;
	operand[2] = #50000 1'b1;
	operand[2] = #50000 1'b0;
end 
// operand[ 1 ]
initial
begin
	operand[1] = 1'b0;
	operand[1] = #150000 1'b1;
	operand[1] = #50000 1'b0;
	operand[1] = #50000 1'b1;
	operand[1] = #150000 1'b0;
	operand[1] = #150000 1'b1;
	operand[1] = #150000 1'b0;
	operand[1] = #50000 1'b1;
	operand[1] = #100000 1'b0;
	operand[1] = #50000 1'b1;
	operand[1] = #50000 1'b0;
end 
// operand[ 0 ]
initial
begin
	operand[0] = 1'b0;
	operand[0] = #250000 1'b1;
	operand[0] = #150000 1'b0;
	operand[0] = #50000 1'b1;
	operand[0] = #50000 1'b0;
	operand[0] = #200000 1'b1;
	operand[0] = #50000 1'b0;
	operand[0] = #50000 1'b1;
	operand[0] = #50000 1'b0;
end 
// operator[ 3 ]
initial
begin
	operator[3] = 1'b0;
end 
// operator[ 2 ]
initial
begin
	operator[2] = 1'b0;
end 
// operator[ 1 ]
initial
begin
	operator[1] = 1'b0;
	operator[1] = #360000 1'b1;
	operator[1] = #70000 1'b0;
end 
// operator[ 0 ]
initial
begin
	operator[0] = 1'b0;
	operator[0] = #480000 1'b1;
	operator[0] = #30000 1'b0;
end 

calculadora_vlg_sample_tst tb_sample (
	.clk(clk),
	.operand(operand),
	.operator(operator),
	.reset(reset),
	.set_operand(set_operand),
	.sampler_tx(sampler)
);

calculadora_vlg_check_tst tb_out(
	.aux_first(aux_first),
	.aux_result(aux_result),
	.aux_second(aux_second),
	.op(op),
	.overflow(overflow),
	.result(result),
	.set_operator(set_operator),
	.sampler_rx(sampler)
);
endmodule

