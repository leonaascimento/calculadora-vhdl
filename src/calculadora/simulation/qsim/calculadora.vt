// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/17/2018 16:03:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    calculadora
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module calculadora_vlg_sample_tst(
	clock_50,
	key,
	sw,
	sampler_tx
);
input  clock_50;
input [3:0] key;
input [9:0] sw;
output sampler_tx;

reg sample;
time current_time;
always @(clock_50 or key or sw)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module calculadora_vlg_check_tst (
	aux_first,
	aux_result,
	aux_second,
	hex0,
	hex1,
	hex2,
	hex3,
	ledg,
	ledr,
	operator,
	overflow,
	pwm_duty,
	result,
	set_operator,
	stack_pop,
	stack_push,
	stack_push_value,
	sampler_rx
);
input [7:0] aux_first;
input [7:0] aux_result;
input [7:0] aux_second;
input [6:0] hex0;
input [6:0] hex1;
input [6:0] hex2;
input [6:0] hex3;
input [7:0] ledg;
input [9:0] ledr;
input [1:0] operator;
input  overflow;
input [7:0] pwm_duty;
input [7:0] result;
input  set_operator;
input  stack_pop;
input  stack_push;
input [7:0] stack_push_value;
input sampler_rx;

reg [7:0] aux_first_expected;
reg [7:0] aux_result_expected;
reg [7:0] aux_second_expected;
reg [6:0] hex0_expected;
reg [6:0] hex1_expected;
reg [6:0] hex2_expected;
reg [6:0] hex3_expected;
reg [7:0] ledg_expected;
reg [9:0] ledr_expected;
reg [1:0] operator_expected;
reg  overflow_expected;
reg [7:0] pwm_duty_expected;
reg [7:0] result_expected;
reg  set_operator_expected;
reg  stack_pop_expected;
reg  stack_push_expected;
reg [7:0] stack_push_value_expected;

reg [7:0] aux_first_prev;
reg [7:0] aux_result_prev;
reg [7:0] aux_second_prev;
reg [6:0] hex0_prev;
reg [6:0] hex1_prev;
reg [6:0] hex2_prev;
reg [6:0] hex3_prev;
reg [7:0] ledg_prev;
reg [9:0] ledr_prev;
reg [1:0] operator_prev;
reg  overflow_prev;
reg [7:0] pwm_duty_prev;
reg [7:0] result_prev;
reg  set_operator_prev;
reg  stack_pop_prev;
reg  stack_push_prev;
reg [7:0] stack_push_value_prev;

reg [7:0] aux_first_expected_prev;
reg [7:0] aux_result_expected_prev;
reg [7:0] aux_second_expected_prev;
reg [1:0] operator_expected_prev;
reg  overflow_expected_prev;
reg [7:0] pwm_duty_expected_prev;
reg [7:0] result_expected_prev;
reg  set_operator_expected_prev;
reg  stack_pop_expected_prev;
reg  stack_push_expected_prev;
reg [7:0] stack_push_value_expected_prev;

reg [7:0] last_aux_first_exp;
reg [7:0] last_aux_result_exp;
reg [7:0] last_aux_second_exp;
reg [1:0] last_operator_exp;
reg  last_overflow_exp;
reg [7:0] last_pwm_duty_exp;
reg [7:0] last_result_exp;
reg  last_set_operator_exp;
reg  last_stack_pop_exp;
reg  last_stack_push_exp;
reg [7:0] last_stack_push_value_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	aux_first_prev = aux_first;
	aux_result_prev = aux_result;
	aux_second_prev = aux_second;
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	hex3_prev = hex3;
	ledg_prev = ledg;
	ledr_prev = ledr;
	operator_prev = operator;
	overflow_prev = overflow;
	pwm_duty_prev = pwm_duty;
	result_prev = result;
	set_operator_prev = set_operator;
	stack_pop_prev = stack_pop;
	stack_push_prev = stack_push;
	stack_push_value_prev = stack_push_value;
end

// update expected /o prevs

always @(trigger)
begin
	aux_first_expected_prev = aux_first_expected;
	aux_result_expected_prev = aux_result_expected;
	aux_second_expected_prev = aux_second_expected;
	operator_expected_prev = operator_expected;
	overflow_expected_prev = overflow_expected;
	pwm_duty_expected_prev = pwm_duty_expected;
	result_expected_prev = result_expected;
	set_operator_expected_prev = set_operator_expected;
	stack_pop_expected_prev = stack_pop_expected;
	stack_push_expected_prev = stack_push_expected;
	stack_push_value_expected_prev = stack_push_value_expected;
end


// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 

// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 
// expected operator[ 1 ]
initial
begin
	operator_expected[1] = 1'bX;
end 
// expected operator[ 0 ]
initial
begin
	operator_expected[0] = 1'bX;
end 

// expected set_operator
initial
begin
	set_operator_expected = 1'bX;
end 
// expected aux_result[ 7 ]
initial
begin
	aux_result_expected[7] = 1'bX;
end 
// expected aux_result[ 6 ]
initial
begin
	aux_result_expected[6] = 1'bX;
end 
// expected aux_result[ 5 ]
initial
begin
	aux_result_expected[5] = 1'bX;
end 
// expected aux_result[ 4 ]
initial
begin
	aux_result_expected[4] = 1'bX;
end 
// expected aux_result[ 3 ]
initial
begin
	aux_result_expected[3] = 1'bX;
end 
// expected aux_result[ 2 ]
initial
begin
	aux_result_expected[2] = 1'bX;
end 
// expected aux_result[ 1 ]
initial
begin
	aux_result_expected[1] = 1'bX;
end 
// expected aux_result[ 0 ]
initial
begin
	aux_result_expected[0] = 1'bX;
end 
// expected aux_first[ 7 ]
initial
begin
	aux_first_expected[7] = 1'bX;
end 
// expected aux_first[ 6 ]
initial
begin
	aux_first_expected[6] = 1'bX;
end 
// expected aux_first[ 5 ]
initial
begin
	aux_first_expected[5] = 1'bX;
end 
// expected aux_first[ 4 ]
initial
begin
	aux_first_expected[4] = 1'bX;
end 
// expected aux_first[ 3 ]
initial
begin
	aux_first_expected[3] = 1'bX;
end 
// expected aux_first[ 2 ]
initial
begin
	aux_first_expected[2] = 1'bX;
end 
// expected aux_first[ 1 ]
initial
begin
	aux_first_expected[1] = 1'bX;
end 
// expected aux_first[ 0 ]
initial
begin
	aux_first_expected[0] = 1'bX;
end 
// expected aux_second[ 7 ]
initial
begin
	aux_second_expected[7] = 1'bX;
end 
// expected aux_second[ 6 ]
initial
begin
	aux_second_expected[6] = 1'bX;
end 
// expected aux_second[ 5 ]
initial
begin
	aux_second_expected[5] = 1'bX;
end 
// expected aux_second[ 4 ]
initial
begin
	aux_second_expected[4] = 1'bX;
end 
// expected aux_second[ 3 ]
initial
begin
	aux_second_expected[3] = 1'bX;
end 
// expected aux_second[ 2 ]
initial
begin
	aux_second_expected[2] = 1'bX;
end 
// expected aux_second[ 1 ]
initial
begin
	aux_second_expected[1] = 1'bX;
end 
// expected aux_second[ 0 ]
initial
begin
	aux_second_expected[0] = 1'bX;
end 
// expected stack_push_value[ 7 ]
initial
begin
	stack_push_value_expected[7] = 1'bX;
end 
// expected stack_push_value[ 6 ]
initial
begin
	stack_push_value_expected[6] = 1'bX;
end 
// expected stack_push_value[ 5 ]
initial
begin
	stack_push_value_expected[5] = 1'bX;
end 
// expected stack_push_value[ 4 ]
initial
begin
	stack_push_value_expected[4] = 1'bX;
end 
// expected stack_push_value[ 3 ]
initial
begin
	stack_push_value_expected[3] = 1'bX;
end 
// expected stack_push_value[ 2 ]
initial
begin
	stack_push_value_expected[2] = 1'bX;
end 
// expected stack_push_value[ 1 ]
initial
begin
	stack_push_value_expected[1] = 1'bX;
end 
// expected stack_push_value[ 0 ]
initial
begin
	stack_push_value_expected[0] = 1'bX;
end 

// expected stack_pop
initial
begin
	stack_pop_expected = 1'bX;
end 

// expected stack_push
initial
begin
	stack_push_expected = 1'bX;
end 
// expected pwm_duty[ 7 ]
initial
begin
	pwm_duty_expected[7] = 1'bX;
end 
// expected pwm_duty[ 6 ]
initial
begin
	pwm_duty_expected[6] = 1'bX;
end 
// expected pwm_duty[ 5 ]
initial
begin
	pwm_duty_expected[5] = 1'bX;
end 
// expected pwm_duty[ 4 ]
initial
begin
	pwm_duty_expected[4] = 1'bX;
end 
// expected pwm_duty[ 3 ]
initial
begin
	pwm_duty_expected[3] = 1'bX;
end 
// expected pwm_duty[ 2 ]
initial
begin
	pwm_duty_expected[2] = 1'bX;
end 
// expected pwm_duty[ 1 ]
initial
begin
	pwm_duty_expected[1] = 1'bX;
end 
// expected pwm_duty[ 0 ]
initial
begin
	pwm_duty_expected[0] = 1'bX;
end 
// generate trigger
always @(aux_first_expected or aux_first or aux_result_expected or aux_result or aux_second_expected or aux_second or hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or hex3_expected or hex3 or ledg_expected or ledg or ledr_expected or ledr or operator_expected or operator or overflow_expected or overflow or pwm_duty_expected or pwm_duty or result_expected or result or set_operator_expected or set_operator or stack_pop_expected or stack_pop or stack_push_expected or stack_push or stack_push_value_expected or stack_push_value)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aux_first = %b | expected aux_result = %b | expected aux_second = %b | expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected hex3 = %b | expected ledg = %b | expected ledr = %b | expected operator = %b | expected overflow = %b | expected pwm_duty = %b | expected result = %b | expected set_operator = %b | expected stack_pop = %b | expected stack_push = %b | expected stack_push_value = %b | ",aux_first_expected_prev,aux_result_expected_prev,aux_second_expected_prev,hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,hex3_expected_prev,ledg_expected_prev,ledr_expected_prev,operator_expected_prev,overflow_expected_prev,pwm_duty_expected_prev,result_expected_prev,set_operator_expected_prev,stack_pop_expected_prev,stack_push_expected_prev,stack_push_value_expected_prev);
	$display("| real aux_first = %b | real aux_result = %b | real aux_second = %b | real hex0 = %b | real hex1 = %b | real hex2 = %b | real hex3 = %b | real ledg = %b | real ledr = %b | real operator = %b | real overflow = %b | real pwm_duty = %b | real result = %b | real set_operator = %b | real stack_pop = %b | real stack_push = %b | real stack_push_value = %b | ",aux_first_prev,aux_result_prev,aux_second_prev,hex0_prev,hex1_prev,hex2_prev,hex3_prev,ledg_prev,ledr_prev,operator_prev,overflow_prev,pwm_duty_prev,result_prev,set_operator_prev,stack_pop_prev,stack_push_prev,stack_push_value_prev);
`endif
	if (
		( aux_first_expected_prev[0] !== 1'bx ) && ( aux_first_prev[0] !== aux_first_expected_prev[0] )
		&& ((aux_first_expected_prev[0] !== last_aux_first_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[0] = aux_first_expected_prev[0];
	end
	if (
		( aux_first_expected_prev[1] !== 1'bx ) && ( aux_first_prev[1] !== aux_first_expected_prev[1] )
		&& ((aux_first_expected_prev[1] !== last_aux_first_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[1] = aux_first_expected_prev[1];
	end
	if (
		( aux_first_expected_prev[2] !== 1'bx ) && ( aux_first_prev[2] !== aux_first_expected_prev[2] )
		&& ((aux_first_expected_prev[2] !== last_aux_first_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[2] = aux_first_expected_prev[2];
	end
	if (
		( aux_first_expected_prev[3] !== 1'bx ) && ( aux_first_prev[3] !== aux_first_expected_prev[3] )
		&& ((aux_first_expected_prev[3] !== last_aux_first_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[3] = aux_first_expected_prev[3];
	end
	if (
		( aux_first_expected_prev[4] !== 1'bx ) && ( aux_first_prev[4] !== aux_first_expected_prev[4] )
		&& ((aux_first_expected_prev[4] !== last_aux_first_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[4] = aux_first_expected_prev[4];
	end
	if (
		( aux_first_expected_prev[5] !== 1'bx ) && ( aux_first_prev[5] !== aux_first_expected_prev[5] )
		&& ((aux_first_expected_prev[5] !== last_aux_first_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[5] = aux_first_expected_prev[5];
	end
	if (
		( aux_first_expected_prev[6] !== 1'bx ) && ( aux_first_prev[6] !== aux_first_expected_prev[6] )
		&& ((aux_first_expected_prev[6] !== last_aux_first_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[6] = aux_first_expected_prev[6];
	end
	if (
		( aux_first_expected_prev[7] !== 1'bx ) && ( aux_first_prev[7] !== aux_first_expected_prev[7] )
		&& ((aux_first_expected_prev[7] !== last_aux_first_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_first[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_first_expected_prev);
		$display ("     Real value = %b", aux_first_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_first_exp[7] = aux_first_expected_prev[7];
	end
	if (
		( aux_result_expected_prev[0] !== 1'bx ) && ( aux_result_prev[0] !== aux_result_expected_prev[0] )
		&& ((aux_result_expected_prev[0] !== last_aux_result_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[0] = aux_result_expected_prev[0];
	end
	if (
		( aux_result_expected_prev[1] !== 1'bx ) && ( aux_result_prev[1] !== aux_result_expected_prev[1] )
		&& ((aux_result_expected_prev[1] !== last_aux_result_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[1] = aux_result_expected_prev[1];
	end
	if (
		( aux_result_expected_prev[2] !== 1'bx ) && ( aux_result_prev[2] !== aux_result_expected_prev[2] )
		&& ((aux_result_expected_prev[2] !== last_aux_result_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[2] = aux_result_expected_prev[2];
	end
	if (
		( aux_result_expected_prev[3] !== 1'bx ) && ( aux_result_prev[3] !== aux_result_expected_prev[3] )
		&& ((aux_result_expected_prev[3] !== last_aux_result_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[3] = aux_result_expected_prev[3];
	end
	if (
		( aux_result_expected_prev[4] !== 1'bx ) && ( aux_result_prev[4] !== aux_result_expected_prev[4] )
		&& ((aux_result_expected_prev[4] !== last_aux_result_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[4] = aux_result_expected_prev[4];
	end
	if (
		( aux_result_expected_prev[5] !== 1'bx ) && ( aux_result_prev[5] !== aux_result_expected_prev[5] )
		&& ((aux_result_expected_prev[5] !== last_aux_result_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[5] = aux_result_expected_prev[5];
	end
	if (
		( aux_result_expected_prev[6] !== 1'bx ) && ( aux_result_prev[6] !== aux_result_expected_prev[6] )
		&& ((aux_result_expected_prev[6] !== last_aux_result_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[6] = aux_result_expected_prev[6];
	end
	if (
		( aux_result_expected_prev[7] !== 1'bx ) && ( aux_result_prev[7] !== aux_result_expected_prev[7] )
		&& ((aux_result_expected_prev[7] !== last_aux_result_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_result_exp[7] = aux_result_expected_prev[7];
	end
	if (
		( aux_second_expected_prev[0] !== 1'bx ) && ( aux_second_prev[0] !== aux_second_expected_prev[0] )
		&& ((aux_second_expected_prev[0] !== last_aux_second_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[0] = aux_second_expected_prev[0];
	end
	if (
		( aux_second_expected_prev[1] !== 1'bx ) && ( aux_second_prev[1] !== aux_second_expected_prev[1] )
		&& ((aux_second_expected_prev[1] !== last_aux_second_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[1] = aux_second_expected_prev[1];
	end
	if (
		( aux_second_expected_prev[2] !== 1'bx ) && ( aux_second_prev[2] !== aux_second_expected_prev[2] )
		&& ((aux_second_expected_prev[2] !== last_aux_second_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[2] = aux_second_expected_prev[2];
	end
	if (
		( aux_second_expected_prev[3] !== 1'bx ) && ( aux_second_prev[3] !== aux_second_expected_prev[3] )
		&& ((aux_second_expected_prev[3] !== last_aux_second_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[3] = aux_second_expected_prev[3];
	end
	if (
		( aux_second_expected_prev[4] !== 1'bx ) && ( aux_second_prev[4] !== aux_second_expected_prev[4] )
		&& ((aux_second_expected_prev[4] !== last_aux_second_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[4] = aux_second_expected_prev[4];
	end
	if (
		( aux_second_expected_prev[5] !== 1'bx ) && ( aux_second_prev[5] !== aux_second_expected_prev[5] )
		&& ((aux_second_expected_prev[5] !== last_aux_second_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[5] = aux_second_expected_prev[5];
	end
	if (
		( aux_second_expected_prev[6] !== 1'bx ) && ( aux_second_prev[6] !== aux_second_expected_prev[6] )
		&& ((aux_second_expected_prev[6] !== last_aux_second_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[6] = aux_second_expected_prev[6];
	end
	if (
		( aux_second_expected_prev[7] !== 1'bx ) && ( aux_second_prev[7] !== aux_second_expected_prev[7] )
		&& ((aux_second_expected_prev[7] !== last_aux_second_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_second[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_second_expected_prev);
		$display ("     Real value = %b", aux_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_second_exp[7] = aux_second_expected_prev[7];
	end
	if (
		( operator_expected_prev[0] !== 1'bx ) && ( operator_prev[0] !== operator_expected_prev[0] )
		&& ((operator_expected_prev[0] !== last_operator_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operator[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operator_expected_prev);
		$display ("     Real value = %b", operator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_operator_exp[0] = operator_expected_prev[0];
	end
	if (
		( operator_expected_prev[1] !== 1'bx ) && ( operator_prev[1] !== operator_expected_prev[1] )
		&& ((operator_expected_prev[1] !== last_operator_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operator[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operator_expected_prev);
		$display ("     Real value = %b", operator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_operator_exp[1] = operator_expected_prev[1];
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( pwm_duty_expected_prev[0] !== 1'bx ) && ( pwm_duty_prev[0] !== pwm_duty_expected_prev[0] )
		&& ((pwm_duty_expected_prev[0] !== last_pwm_duty_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_duty[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_duty_expected_prev);
		$display ("     Real value = %b", pwm_duty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pwm_duty_exp[0] = pwm_duty_expected_prev[0];
	end
	if (
		( pwm_duty_expected_prev[1] !== 1'bx ) && ( pwm_duty_prev[1] !== pwm_duty_expected_prev[1] )
		&& ((pwm_duty_expected_prev[1] !== last_pwm_duty_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_duty[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_duty_expected_prev);
		$display ("     Real value = %b", pwm_duty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pwm_duty_exp[1] = pwm_duty_expected_prev[1];
	end
	if (
		( pwm_duty_expected_prev[2] !== 1'bx ) && ( pwm_duty_prev[2] !== pwm_duty_expected_prev[2] )
		&& ((pwm_duty_expected_prev[2] !== last_pwm_duty_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_duty[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_duty_expected_prev);
		$display ("     Real value = %b", pwm_duty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pwm_duty_exp[2] = pwm_duty_expected_prev[2];
	end
	if (
		( pwm_duty_expected_prev[3] !== 1'bx ) && ( pwm_duty_prev[3] !== pwm_duty_expected_prev[3] )
		&& ((pwm_duty_expected_prev[3] !== last_pwm_duty_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_duty[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_duty_expected_prev);
		$display ("     Real value = %b", pwm_duty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pwm_duty_exp[3] = pwm_duty_expected_prev[3];
	end
	if (
		( pwm_duty_expected_prev[4] !== 1'bx ) && ( pwm_duty_prev[4] !== pwm_duty_expected_prev[4] )
		&& ((pwm_duty_expected_prev[4] !== last_pwm_duty_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_duty[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_duty_expected_prev);
		$display ("     Real value = %b", pwm_duty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pwm_duty_exp[4] = pwm_duty_expected_prev[4];
	end
	if (
		( pwm_duty_expected_prev[5] !== 1'bx ) && ( pwm_duty_prev[5] !== pwm_duty_expected_prev[5] )
		&& ((pwm_duty_expected_prev[5] !== last_pwm_duty_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_duty[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_duty_expected_prev);
		$display ("     Real value = %b", pwm_duty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pwm_duty_exp[5] = pwm_duty_expected_prev[5];
	end
	if (
		( pwm_duty_expected_prev[6] !== 1'bx ) && ( pwm_duty_prev[6] !== pwm_duty_expected_prev[6] )
		&& ((pwm_duty_expected_prev[6] !== last_pwm_duty_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_duty[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_duty_expected_prev);
		$display ("     Real value = %b", pwm_duty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pwm_duty_exp[6] = pwm_duty_expected_prev[6];
	end
	if (
		( pwm_duty_expected_prev[7] !== 1'bx ) && ( pwm_duty_prev[7] !== pwm_duty_expected_prev[7] )
		&& ((pwm_duty_expected_prev[7] !== last_pwm_duty_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_duty[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_duty_expected_prev);
		$display ("     Real value = %b", pwm_duty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_pwm_duty_exp[7] = pwm_duty_expected_prev[7];
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( set_operator_expected_prev !== 1'bx ) && ( set_operator_prev !== set_operator_expected_prev )
		&& ((set_operator_expected_prev !== last_set_operator_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port set_operator :: @time = %t",  $realtime);
		$display ("     Expected value = %b", set_operator_expected_prev);
		$display ("     Real value = %b", set_operator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_set_operator_exp = set_operator_expected_prev;
	end
	if (
		( stack_pop_expected_prev !== 1'bx ) && ( stack_pop_prev !== stack_pop_expected_prev )
		&& ((stack_pop_expected_prev !== last_stack_pop_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_pop :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_pop_expected_prev);
		$display ("     Real value = %b", stack_pop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_stack_pop_exp = stack_pop_expected_prev;
	end
	if (
		( stack_push_expected_prev !== 1'bx ) && ( stack_push_prev !== stack_push_expected_prev )
		&& ((stack_push_expected_prev !== last_stack_push_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_expected_prev);
		$display ("     Real value = %b", stack_push_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_stack_push_exp = stack_push_expected_prev;
	end
	if (
		( stack_push_value_expected_prev[0] !== 1'bx ) && ( stack_push_value_prev[0] !== stack_push_value_expected_prev[0] )
		&& ((stack_push_value_expected_prev[0] !== last_stack_push_value_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_stack_push_value_exp[0] = stack_push_value_expected_prev[0];
	end
	if (
		( stack_push_value_expected_prev[1] !== 1'bx ) && ( stack_push_value_prev[1] !== stack_push_value_expected_prev[1] )
		&& ((stack_push_value_expected_prev[1] !== last_stack_push_value_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_stack_push_value_exp[1] = stack_push_value_expected_prev[1];
	end
	if (
		( stack_push_value_expected_prev[2] !== 1'bx ) && ( stack_push_value_prev[2] !== stack_push_value_expected_prev[2] )
		&& ((stack_push_value_expected_prev[2] !== last_stack_push_value_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_stack_push_value_exp[2] = stack_push_value_expected_prev[2];
	end
	if (
		( stack_push_value_expected_prev[3] !== 1'bx ) && ( stack_push_value_prev[3] !== stack_push_value_expected_prev[3] )
		&& ((stack_push_value_expected_prev[3] !== last_stack_push_value_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_stack_push_value_exp[3] = stack_push_value_expected_prev[3];
	end
	if (
		( stack_push_value_expected_prev[4] !== 1'bx ) && ( stack_push_value_prev[4] !== stack_push_value_expected_prev[4] )
		&& ((stack_push_value_expected_prev[4] !== last_stack_push_value_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_stack_push_value_exp[4] = stack_push_value_expected_prev[4];
	end
	if (
		( stack_push_value_expected_prev[5] !== 1'bx ) && ( stack_push_value_prev[5] !== stack_push_value_expected_prev[5] )
		&& ((stack_push_value_expected_prev[5] !== last_stack_push_value_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_stack_push_value_exp[5] = stack_push_value_expected_prev[5];
	end
	if (
		( stack_push_value_expected_prev[6] !== 1'bx ) && ( stack_push_value_prev[6] !== stack_push_value_expected_prev[6] )
		&& ((stack_push_value_expected_prev[6] !== last_stack_push_value_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_stack_push_value_exp[6] = stack_push_value_expected_prev[6];
	end
	if (
		( stack_push_value_expected_prev[7] !== 1'bx ) && ( stack_push_value_prev[7] !== stack_push_value_expected_prev[7] )
		&& ((stack_push_value_expected_prev[7] !== last_stack_push_value_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_stack_push_value_exp[7] = stack_push_value_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module calculadora_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock_50;
reg [3:0] key;
reg [9:0] sw;
// wires                                               
wire [7:0] aux_first;
wire [7:0] aux_result;
wire [7:0] aux_second;
wire [6:0] hex0;
wire [6:0] hex1;
wire [6:0] hex2;
wire [6:0] hex3;
wire [7:0] ledg;
wire [9:0] ledr;
wire [1:0] operator;
wire overflow;
wire [7:0] pwm_duty;
wire [7:0] result;
wire set_operator;
wire stack_pop;
wire stack_push;
wire [7:0] stack_push_value;

wire sampler;                             

// assign statements (if any)                          
calculadora i1 (
// port map - connection between master ports and signals/registers   
	.aux_first(aux_first),
	.aux_result(aux_result),
	.aux_second(aux_second),
	.clock_50(clock_50),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.key(key),
	.ledg(ledg),
	.ledr(ledr),
	.operator(operator),
	.overflow(overflow),
	.pwm_duty(pwm_duty),
	.result(result),
	.set_operator(set_operator),
	.stack_pop(stack_pop),
	.stack_push(stack_push),
	.stack_push_value(stack_push_value),
	.sw(sw)
);

// clock_50
always
begin
	clock_50 = 1'b0;
	clock_50 = #5000 1'b1;
	#5000;
end 
// key[ 3 ]
initial
begin
	key[3] = 1'b0;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b0;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b0;
	key[1] = #320000 1'b1;
	key[1] = #30000 1'b0;
	key[1] = #90000 1'b1;
	key[1] = #20000 1'b0;
	key[1] = #80000 1'b1;
	key[1] = #70000 1'b0;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b0;
end 

// sw[9]
initial
begin
	sw[9] = 1'b0;
	sw[9] = #740000 1'b1;
	sw[9] = #80000 1'b0;
end 

// sw[8]
initial
begin
	sw[8] = 1'b0;
end 

// sw[7]
initial
begin
	sw[7] = 1'b0;
end 

// sw[6]
initial
begin
	sw[6] = 1'b0;
end 

// sw[5]
initial
begin
	sw[5] = 1'b0;
end 

// sw[4]
initial
begin
	sw[4] = 1'b0;
end 

// sw[3]
initial
begin
	sw[3] = 1'b0;
end 

// sw[2]
initial
begin
	sw[2] = 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #10000 1'b1;
	sw[2] = #30000 1'b0;
	sw[2] = #20000 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #10000 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #40000 1'b1;
	sw[2] = #20000 1'b0;
	sw[2] = #10000 1'b1;
	sw[2] = #60000 1'b0;
	sw[2] = #10000 1'b1;
	sw[2] = #20000 1'b0;
	sw[2] = #30000 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #10000 1'b1;
	sw[2] = #20000 1'b0;
	sw[2] = #30000 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #30000 1'b1;
	sw[2] = #20000 1'b0;
	sw[2] = #40000 1'b1;
	sw[2] = #30000 1'b0;
	sw[2] = #10000 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #20000 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #30000 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #10000 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #20000 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #10000 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #10000 1'b1;
	sw[2] = #50000 1'b0;
	sw[2] = #30000 1'b1;
	sw[2] = #20000 1'b0;
	sw[2] = #30000 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #10000 1'b1;
	sw[2] = #20000 1'b0;
	sw[2] = #50000 1'b1;
	sw[2] = #40000 1'b0;
	sw[2] = #20000 1'b1;
	sw[2] = #20000 1'b0;
	sw[2] = #10000 1'b1;
	sw[2] = #10000 1'b0;
end 

// sw[1]
initial
begin
	sw[1] = 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #20000 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #40000 1'b0;
	sw[1] = #20000 1'b1;
	sw[1] = #50000 1'b0;
	sw[1] = #30000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #30000 1'b1;
	sw[1] = #20000 1'b0;
	sw[1] = #30000 1'b1;
	sw[1] = #20000 1'b0;
	sw[1] = #20000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #20000 1'b0;
	sw[1] = #20000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #70000 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #30000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #30000 1'b1;
	sw[1] = #20000 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #40000 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #20000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #40000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #50000 1'b0;
	sw[1] = #20000 1'b1;
	sw[1] = #20000 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #30000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #20000 1'b1;
	sw[1] = #10000 1'b0;
	sw[1] = #10000 1'b1;
end 

// sw[0]
initial
begin
	sw[0] = 1'b0;
	sw[0] = #50000 1'b1;
	sw[0] = #10000 1'b0;
	sw[0] = #30000 1'b1;
	sw[0] = #10000 1'b0;
	sw[0] = #80000 1'b1;
	sw[0] = #10000 1'b0;
	sw[0] = #10000 1'b1;
	sw[0] = #10000 1'b0;
end 

calculadora_vlg_sample_tst tb_sample (
	.clock_50(clock_50),
	.key(key),
	.sw(sw),
	.sampler_tx(sampler)
);

calculadora_vlg_check_tst tb_out(
	.aux_first(aux_first),
	.aux_result(aux_result),
	.aux_second(aux_second),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.ledg(ledg),
	.ledr(ledr),
	.operator(operator),
	.overflow(overflow),
	.pwm_duty(pwm_duty),
	.result(result),
	.set_operator(set_operator),
	.stack_pop(stack_pop),
	.stack_push(stack_push),
	.stack_push_value(stack_push_value),
	.sampler_rx(sampler)
);
endmodule

