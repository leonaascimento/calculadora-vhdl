// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/19/2018 18:03:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    calculadora
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module calculadora_vlg_sample_tst(
	clock_50,
	key,
	sw,
	sampler_tx
);
input  clock_50;
input [3:0] key;
input [9:0] sw;
output sampler_tx;

reg sample;
time current_time;
always @(clock_50 or key or sw)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module calculadora_vlg_check_tst (
	bcd_result,
	first_operand,
	hex0,
	hex0_result,
	hex1,
	hex1_result,
	hex2,
	hex2_result,
	hex3,
	hex3_result_sign,
	ledg,
	ledr,
	operation_overflow,
	operation_result,
	operator,
	pwm_out,
	pwm_out_vector,
	second_operand,
	set_operator,
	stack_pop,
	stack_push,
	stack_push_value,
	sampler_rx
);
input [11:0] bcd_result;
input [7:0] first_operand;
input [6:0] hex0;
input [6:0] hex0_result;
input [6:0] hex1;
input [6:0] hex1_result;
input [6:0] hex2;
input [6:0] hex2_result;
input [6:0] hex3;
input [6:0] hex3_result_sign;
input [7:0] ledg;
input [9:0] ledr;
input  operation_overflow;
input [7:0] operation_result;
input [1:0] operator;
input  pwm_out;
input [6:0] pwm_out_vector;
input [7:0] second_operand;
input  set_operator;
input  stack_pop;
input  stack_push;
input [7:0] stack_push_value;
input sampler_rx;

reg [11:0] bcd_result_expected;
reg [7:0] first_operand_expected;
reg [6:0] hex0_expected;
reg [6:0] hex0_result_expected;
reg [6:0] hex1_expected;
reg [6:0] hex1_result_expected;
reg [6:0] hex2_expected;
reg [6:0] hex2_result_expected;
reg [6:0] hex3_expected;
reg [6:0] hex3_result_sign_expected;
reg [7:0] ledg_expected;
reg [9:0] ledr_expected;
reg  operation_overflow_expected;
reg [7:0] operation_result_expected;
reg [1:0] operator_expected;
reg  pwm_out_expected;
reg [6:0] pwm_out_vector_expected;
reg [7:0] second_operand_expected;
reg  set_operator_expected;
reg  stack_pop_expected;
reg  stack_push_expected;
reg [7:0] stack_push_value_expected;

reg [11:0] bcd_result_prev;
reg [7:0] first_operand_prev;
reg [6:0] hex0_prev;
reg [6:0] hex0_result_prev;
reg [6:0] hex1_prev;
reg [6:0] hex1_result_prev;
reg [6:0] hex2_prev;
reg [6:0] hex2_result_prev;
reg [6:0] hex3_prev;
reg [6:0] hex3_result_sign_prev;
reg [7:0] ledg_prev;
reg [9:0] ledr_prev;
reg  operation_overflow_prev;
reg [7:0] operation_result_prev;
reg [1:0] operator_prev;
reg  pwm_out_prev;
reg [6:0] pwm_out_vector_prev;
reg [7:0] second_operand_prev;
reg  set_operator_prev;
reg  stack_pop_prev;
reg  stack_push_prev;
reg [7:0] stack_push_value_prev;

reg [11:0] bcd_result_expected_prev;
reg [7:0] first_operand_expected_prev;
reg [6:0] hex0_expected_prev;
reg [6:0] hex0_result_expected_prev;
reg [6:0] hex1_expected_prev;
reg [6:0] hex1_result_expected_prev;
reg [6:0] hex2_expected_prev;
reg [6:0] hex2_result_expected_prev;
reg [6:0] hex3_expected_prev;
reg [6:0] hex3_result_sign_expected_prev;
reg [7:0] ledg_expected_prev;
reg [9:0] ledr_expected_prev;
reg  operation_overflow_expected_prev;
reg [7:0] operation_result_expected_prev;
reg [1:0] operator_expected_prev;
reg  pwm_out_expected_prev;
reg [6:0] pwm_out_vector_expected_prev;
reg [7:0] second_operand_expected_prev;
reg  set_operator_expected_prev;
reg  stack_pop_expected_prev;
reg  stack_push_expected_prev;
reg [7:0] stack_push_value_expected_prev;

reg [11:0] last_bcd_result_exp;
reg [7:0] last_first_operand_exp;
reg [6:0] last_hex0_exp;
reg [6:0] last_hex0_result_exp;
reg [6:0] last_hex1_exp;
reg [6:0] last_hex1_result_exp;
reg [6:0] last_hex2_exp;
reg [6:0] last_hex2_result_exp;
reg [6:0] last_hex3_exp;
reg [6:0] last_hex3_result_sign_exp;
reg [7:0] last_ledg_exp;
reg [9:0] last_ledr_exp;
reg  last_operation_overflow_exp;
reg [7:0] last_operation_result_exp;
reg [1:0] last_operator_exp;
reg  last_pwm_out_exp;
reg [6:0] last_pwm_out_vector_exp;
reg [7:0] last_second_operand_exp;
reg  last_set_operator_exp;
reg  last_stack_pop_exp;
reg  last_stack_push_exp;
reg [7:0] last_stack_push_value_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	bcd_result_prev = bcd_result;
	first_operand_prev = first_operand;
	hex0_prev = hex0;
	hex0_result_prev = hex0_result;
	hex1_prev = hex1;
	hex1_result_prev = hex1_result;
	hex2_prev = hex2;
	hex2_result_prev = hex2_result;
	hex3_prev = hex3;
	hex3_result_sign_prev = hex3_result_sign;
	ledg_prev = ledg;
	ledr_prev = ledr;
	operation_overflow_prev = operation_overflow;
	operation_result_prev = operation_result;
	operator_prev = operator;
	pwm_out_prev = pwm_out;
	pwm_out_vector_prev = pwm_out_vector;
	second_operand_prev = second_operand;
	set_operator_prev = set_operator;
	stack_pop_prev = stack_pop;
	stack_push_prev = stack_push;
	stack_push_value_prev = stack_push_value;
end

// update expected /o prevs

always @(trigger)
begin
	bcd_result_expected_prev = bcd_result_expected;
	first_operand_expected_prev = first_operand_expected;
	hex0_expected_prev = hex0_expected;
	hex0_result_expected_prev = hex0_result_expected;
	hex1_expected_prev = hex1_expected;
	hex1_result_expected_prev = hex1_result_expected;
	hex2_expected_prev = hex2_expected;
	hex2_result_expected_prev = hex2_result_expected;
	hex3_expected_prev = hex3_expected;
	hex3_result_sign_expected_prev = hex3_result_sign_expected;
	ledg_expected_prev = ledg_expected;
	ledr_expected_prev = ledr_expected;
	operation_overflow_expected_prev = operation_overflow_expected;
	operation_result_expected_prev = operation_result_expected;
	operator_expected_prev = operator_expected;
	pwm_out_expected_prev = pwm_out_expected;
	pwm_out_vector_expected_prev = pwm_out_vector_expected;
	second_operand_expected_prev = second_operand_expected;
	set_operator_expected_prev = set_operator_expected;
	stack_pop_expected_prev = stack_pop_expected;
	stack_push_expected_prev = stack_push_expected;
	stack_push_value_expected_prev = stack_push_value_expected;
end


// expected ledg[ 7 ]
initial
begin
	ledg_expected[7] = 1'bX;
end 
// expected ledg[ 6 ]
initial
begin
	ledg_expected[6] = 1'bX;
end 
// expected ledg[ 5 ]
initial
begin
	ledg_expected[5] = 1'bX;
end 
// expected ledg[ 4 ]
initial
begin
	ledg_expected[4] = 1'bX;
end 
// expected ledg[ 3 ]
initial
begin
	ledg_expected[3] = 1'bX;
end 
// expected ledg[ 2 ]
initial
begin
	ledg_expected[2] = 1'bX;
end 
// expected ledg[ 1 ]
initial
begin
	ledg_expected[1] = 1'bX;
end 
// expected ledg[ 0 ]
initial
begin
	ledg_expected[0] = 1'bX;
end 
// expected ledr[ 9 ]
initial
begin
	ledr_expected[9] = 1'bX;
end 
// expected ledr[ 8 ]
initial
begin
	ledr_expected[8] = 1'bX;
end 
// expected ledr[ 7 ]
initial
begin
	ledr_expected[7] = 1'bX;
end 
// expected ledr[ 6 ]
initial
begin
	ledr_expected[6] = 1'bX;
end 
// expected ledr[ 5 ]
initial
begin
	ledr_expected[5] = 1'bX;
end 
// expected ledr[ 4 ]
initial
begin
	ledr_expected[4] = 1'bX;
end 
// expected ledr[ 3 ]
initial
begin
	ledr_expected[3] = 1'bX;
end 
// expected ledr[ 2 ]
initial
begin
	ledr_expected[2] = 1'bX;
end 
// expected ledr[ 1 ]
initial
begin
	ledr_expected[1] = 1'bX;
end 
// expected ledr[ 0 ]
initial
begin
	ledr_expected[0] = 1'bX;
end 
// expected first_operand[ 7 ]
initial
begin
	first_operand_expected[7] = 1'bX;
end 
// expected first_operand[ 6 ]
initial
begin
	first_operand_expected[6] = 1'bX;
end 
// expected first_operand[ 5 ]
initial
begin
	first_operand_expected[5] = 1'bX;
end 
// expected first_operand[ 4 ]
initial
begin
	first_operand_expected[4] = 1'bX;
end 
// expected first_operand[ 3 ]
initial
begin
	first_operand_expected[3] = 1'bX;
end 
// expected first_operand[ 2 ]
initial
begin
	first_operand_expected[2] = 1'bX;
end 
// expected first_operand[ 1 ]
initial
begin
	first_operand_expected[1] = 1'bX;
end 
// expected first_operand[ 0 ]
initial
begin
	first_operand_expected[0] = 1'bX;
end 
// expected second_operand[ 7 ]
initial
begin
	second_operand_expected[7] = 1'bX;
end 
// expected second_operand[ 6 ]
initial
begin
	second_operand_expected[6] = 1'bX;
end 
// expected second_operand[ 5 ]
initial
begin
	second_operand_expected[5] = 1'bX;
end 
// expected second_operand[ 4 ]
initial
begin
	second_operand_expected[4] = 1'bX;
end 
// expected second_operand[ 3 ]
initial
begin
	second_operand_expected[3] = 1'bX;
end 
// expected second_operand[ 2 ]
initial
begin
	second_operand_expected[2] = 1'bX;
end 
// expected second_operand[ 1 ]
initial
begin
	second_operand_expected[1] = 1'bX;
end 
// expected second_operand[ 0 ]
initial
begin
	second_operand_expected[0] = 1'bX;
end 
// expected operator[ 1 ]
initial
begin
	operator_expected[1] = 1'bX;
end 
// expected operator[ 0 ]
initial
begin
	operator_expected[0] = 1'bX;
end 
// expected operation_result[ 7 ]
initial
begin
	operation_result_expected[7] = 1'bX;
end 
// expected operation_result[ 6 ]
initial
begin
	operation_result_expected[6] = 1'bX;
end 
// expected operation_result[ 5 ]
initial
begin
	operation_result_expected[5] = 1'bX;
end 
// expected operation_result[ 4 ]
initial
begin
	operation_result_expected[4] = 1'bX;
end 
// expected operation_result[ 3 ]
initial
begin
	operation_result_expected[3] = 1'bX;
end 
// expected operation_result[ 2 ]
initial
begin
	operation_result_expected[2] = 1'bX;
end 
// expected operation_result[ 1 ]
initial
begin
	operation_result_expected[1] = 1'bX;
end 
// expected operation_result[ 0 ]
initial
begin
	operation_result_expected[0] = 1'bX;
end 

// expected operation_overflow
initial
begin
	operation_overflow_expected = 1'bX;
end 

// expected set_operator
initial
begin
	set_operator_expected = 1'bX;
end 

// expected stack_pop
initial
begin
	stack_pop_expected = 1'bX;
end 

// expected stack_push
initial
begin
	stack_push_expected = 1'bX;
end 
// expected stack_push_value[ 7 ]
initial
begin
	stack_push_value_expected[7] = 1'bX;
end 
// expected stack_push_value[ 6 ]
initial
begin
	stack_push_value_expected[6] = 1'bX;
end 
// expected stack_push_value[ 5 ]
initial
begin
	stack_push_value_expected[5] = 1'bX;
end 
// expected stack_push_value[ 4 ]
initial
begin
	stack_push_value_expected[4] = 1'bX;
end 
// expected stack_push_value[ 3 ]
initial
begin
	stack_push_value_expected[3] = 1'bX;
end 
// expected stack_push_value[ 2 ]
initial
begin
	stack_push_value_expected[2] = 1'bX;
end 
// expected stack_push_value[ 1 ]
initial
begin
	stack_push_value_expected[1] = 1'bX;
end 
// expected stack_push_value[ 0 ]
initial
begin
	stack_push_value_expected[0] = 1'bX;
end 
// expected bcd_result[ 11 ]
initial
begin
	bcd_result_expected[11] = 1'bX;
end 
// expected bcd_result[ 10 ]
initial
begin
	bcd_result_expected[10] = 1'bX;
end 
// expected bcd_result[ 9 ]
initial
begin
	bcd_result_expected[9] = 1'bX;
end 
// expected bcd_result[ 8 ]
initial
begin
	bcd_result_expected[8] = 1'bX;
end 
// expected bcd_result[ 7 ]
initial
begin
	bcd_result_expected[7] = 1'bX;
end 
// expected bcd_result[ 6 ]
initial
begin
	bcd_result_expected[6] = 1'bX;
end 
// expected bcd_result[ 5 ]
initial
begin
	bcd_result_expected[5] = 1'bX;
end 
// expected bcd_result[ 4 ]
initial
begin
	bcd_result_expected[4] = 1'bX;
end 
// expected bcd_result[ 3 ]
initial
begin
	bcd_result_expected[3] = 1'bX;
end 
// expected bcd_result[ 2 ]
initial
begin
	bcd_result_expected[2] = 1'bX;
end 
// expected bcd_result[ 1 ]
initial
begin
	bcd_result_expected[1] = 1'bX;
end 
// expected bcd_result[ 0 ]
initial
begin
	bcd_result_expected[0] = 1'bX;
end 
// expected hex3[ 6 ]
initial
begin
	hex3_expected[6] = 1'bX;
end 
// expected hex3[ 5 ]
initial
begin
	hex3_expected[5] = 1'bX;
end 
// expected hex3[ 4 ]
initial
begin
	hex3_expected[4] = 1'bX;
end 
// expected hex3[ 3 ]
initial
begin
	hex3_expected[3] = 1'bX;
end 
// expected hex3[ 2 ]
initial
begin
	hex3_expected[2] = 1'bX;
end 
// expected hex3[ 1 ]
initial
begin
	hex3_expected[1] = 1'bX;
end 
// expected hex3[ 0 ]
initial
begin
	hex3_expected[0] = 1'bX;
end 
// expected hex3_result_sign[ 6 ]
initial
begin
	hex3_result_sign_expected[6] = 1'bX;
end 
// expected hex3_result_sign[ 5 ]
initial
begin
	hex3_result_sign_expected[5] = 1'bX;
end 
// expected hex3_result_sign[ 4 ]
initial
begin
	hex3_result_sign_expected[4] = 1'bX;
end 
// expected hex3_result_sign[ 3 ]
initial
begin
	hex3_result_sign_expected[3] = 1'bX;
end 
// expected hex3_result_sign[ 2 ]
initial
begin
	hex3_result_sign_expected[2] = 1'bX;
end 
// expected hex3_result_sign[ 1 ]
initial
begin
	hex3_result_sign_expected[1] = 1'bX;
end 
// expected hex3_result_sign[ 0 ]
initial
begin
	hex3_result_sign_expected[0] = 1'bX;
end 
// expected hex2[ 6 ]
initial
begin
	hex2_expected[6] = 1'bX;
end 
// expected hex2[ 5 ]
initial
begin
	hex2_expected[5] = 1'bX;
end 
// expected hex2[ 4 ]
initial
begin
	hex2_expected[4] = 1'bX;
end 
// expected hex2[ 3 ]
initial
begin
	hex2_expected[3] = 1'bX;
end 
// expected hex2[ 2 ]
initial
begin
	hex2_expected[2] = 1'bX;
end 
// expected hex2[ 1 ]
initial
begin
	hex2_expected[1] = 1'bX;
end 
// expected hex2[ 0 ]
initial
begin
	hex2_expected[0] = 1'bX;
end 
// expected hex2_result[ 6 ]
initial
begin
	hex2_result_expected[6] = 1'bX;
end 
// expected hex2_result[ 5 ]
initial
begin
	hex2_result_expected[5] = 1'bX;
end 
// expected hex2_result[ 4 ]
initial
begin
	hex2_result_expected[4] = 1'bX;
end 
// expected hex2_result[ 3 ]
initial
begin
	hex2_result_expected[3] = 1'bX;
end 
// expected hex2_result[ 2 ]
initial
begin
	hex2_result_expected[2] = 1'bX;
end 
// expected hex2_result[ 1 ]
initial
begin
	hex2_result_expected[1] = 1'bX;
end 
// expected hex2_result[ 0 ]
initial
begin
	hex2_result_expected[0] = 1'bX;
end 
// expected hex1[ 6 ]
initial
begin
	hex1_expected[6] = 1'bX;
end 
// expected hex1[ 5 ]
initial
begin
	hex1_expected[5] = 1'bX;
end 
// expected hex1[ 4 ]
initial
begin
	hex1_expected[4] = 1'bX;
end 
// expected hex1[ 3 ]
initial
begin
	hex1_expected[3] = 1'bX;
end 
// expected hex1[ 2 ]
initial
begin
	hex1_expected[2] = 1'bX;
end 
// expected hex1[ 1 ]
initial
begin
	hex1_expected[1] = 1'bX;
end 
// expected hex1[ 0 ]
initial
begin
	hex1_expected[0] = 1'bX;
end 
// expected hex1_result[ 6 ]
initial
begin
	hex1_result_expected[6] = 1'bX;
end 
// expected hex1_result[ 5 ]
initial
begin
	hex1_result_expected[5] = 1'bX;
end 
// expected hex1_result[ 4 ]
initial
begin
	hex1_result_expected[4] = 1'bX;
end 
// expected hex1_result[ 3 ]
initial
begin
	hex1_result_expected[3] = 1'bX;
end 
// expected hex1_result[ 2 ]
initial
begin
	hex1_result_expected[2] = 1'bX;
end 
// expected hex1_result[ 1 ]
initial
begin
	hex1_result_expected[1] = 1'bX;
end 
// expected hex1_result[ 0 ]
initial
begin
	hex1_result_expected[0] = 1'bX;
end 
// expected hex0[ 6 ]
initial
begin
	hex0_expected[6] = 1'bX;
end 
// expected hex0[ 5 ]
initial
begin
	hex0_expected[5] = 1'bX;
end 
// expected hex0[ 4 ]
initial
begin
	hex0_expected[4] = 1'bX;
end 
// expected hex0[ 3 ]
initial
begin
	hex0_expected[3] = 1'bX;
end 
// expected hex0[ 2 ]
initial
begin
	hex0_expected[2] = 1'bX;
end 
// expected hex0[ 1 ]
initial
begin
	hex0_expected[1] = 1'bX;
end 
// expected hex0[ 0 ]
initial
begin
	hex0_expected[0] = 1'bX;
end 
// expected hex0_result[ 6 ]
initial
begin
	hex0_result_expected[6] = 1'bX;
end 
// expected hex0_result[ 5 ]
initial
begin
	hex0_result_expected[5] = 1'bX;
end 
// expected hex0_result[ 4 ]
initial
begin
	hex0_result_expected[4] = 1'bX;
end 
// expected hex0_result[ 3 ]
initial
begin
	hex0_result_expected[3] = 1'bX;
end 
// expected hex0_result[ 2 ]
initial
begin
	hex0_result_expected[2] = 1'bX;
end 
// expected hex0_result[ 1 ]
initial
begin
	hex0_result_expected[1] = 1'bX;
end 
// expected hex0_result[ 0 ]
initial
begin
	hex0_result_expected[0] = 1'bX;
end 

// expected pwm_out
initial
begin
	pwm_out_expected = 1'bX;
end 
// expected pwm_out_vector[ 6 ]
initial
begin
	pwm_out_vector_expected[6] = 1'bX;
end 
// expected pwm_out_vector[ 5 ]
initial
begin
	pwm_out_vector_expected[5] = 1'bX;
end 
// expected pwm_out_vector[ 4 ]
initial
begin
	pwm_out_vector_expected[4] = 1'bX;
end 
// expected pwm_out_vector[ 3 ]
initial
begin
	pwm_out_vector_expected[3] = 1'bX;
end 
// expected pwm_out_vector[ 2 ]
initial
begin
	pwm_out_vector_expected[2] = 1'bX;
end 
// expected pwm_out_vector[ 1 ]
initial
begin
	pwm_out_vector_expected[1] = 1'bX;
end 
// expected pwm_out_vector[ 0 ]
initial
begin
	pwm_out_vector_expected[0] = 1'bX;
end 
// generate trigger
always @(bcd_result_expected or bcd_result or first_operand_expected or first_operand or hex0_expected or hex0 or hex0_result_expected or hex0_result or hex1_expected or hex1 or hex1_result_expected or hex1_result or hex2_expected or hex2 or hex2_result_expected or hex2_result or hex3_expected or hex3 or hex3_result_sign_expected or hex3_result_sign or ledg_expected or ledg or ledr_expected or ledr or operation_overflow_expected or operation_overflow or operation_result_expected or operation_result or operator_expected or operator or pwm_out_expected or pwm_out or pwm_out_vector_expected or pwm_out_vector or second_operand_expected or second_operand or set_operator_expected or set_operator or stack_pop_expected or stack_pop or stack_push_expected or stack_push or stack_push_value_expected or stack_push_value)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bcd_result = %b | expected first_operand = %b | expected hex0 = %b | expected hex0_result = %b | expected hex1 = %b | expected hex1_result = %b | expected hex2 = %b | expected hex2_result = %b | expected hex3 = %b | expected hex3_result_sign = %b | expected ledg = %b | expected ledr = %b | expected operation_overflow = %b | expected operation_result = %b | expected operator = %b | expected pwm_out = %b | expected pwm_out_vector = %b | expected second_operand = %b | expected set_operator = %b | expected stack_pop = %b | expected stack_push = %b | expected stack_push_value = %b | ",bcd_result_expected_prev,first_operand_expected_prev,hex0_expected_prev,hex0_result_expected_prev,hex1_expected_prev,hex1_result_expected_prev,hex2_expected_prev,hex2_result_expected_prev,hex3_expected_prev,hex3_result_sign_expected_prev,ledg_expected_prev,ledr_expected_prev,operation_overflow_expected_prev,operation_result_expected_prev,operator_expected_prev,pwm_out_expected_prev,pwm_out_vector_expected_prev,second_operand_expected_prev,set_operator_expected_prev,stack_pop_expected_prev,stack_push_expected_prev,stack_push_value_expected_prev);
	$display("| real bcd_result = %b | real first_operand = %b | real hex0 = %b | real hex0_result = %b | real hex1 = %b | real hex1_result = %b | real hex2 = %b | real hex2_result = %b | real hex3 = %b | real hex3_result_sign = %b | real ledg = %b | real ledr = %b | real operation_overflow = %b | real operation_result = %b | real operator = %b | real pwm_out = %b | real pwm_out_vector = %b | real second_operand = %b | real set_operator = %b | real stack_pop = %b | real stack_push = %b | real stack_push_value = %b | ",bcd_result_prev,first_operand_prev,hex0_prev,hex0_result_prev,hex1_prev,hex1_result_prev,hex2_prev,hex2_result_prev,hex3_prev,hex3_result_sign_prev,ledg_prev,ledr_prev,operation_overflow_prev,operation_result_prev,operator_prev,pwm_out_prev,pwm_out_vector_prev,second_operand_prev,set_operator_prev,stack_pop_prev,stack_push_prev,stack_push_value_prev);
`endif
	if (
		( bcd_result_expected_prev[0] !== 1'bx ) && ( bcd_result_prev[0] !== bcd_result_expected_prev[0] )
		&& ((bcd_result_expected_prev[0] !== last_bcd_result_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[0] = bcd_result_expected_prev[0];
	end
	if (
		( bcd_result_expected_prev[1] !== 1'bx ) && ( bcd_result_prev[1] !== bcd_result_expected_prev[1] )
		&& ((bcd_result_expected_prev[1] !== last_bcd_result_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[1] = bcd_result_expected_prev[1];
	end
	if (
		( bcd_result_expected_prev[2] !== 1'bx ) && ( bcd_result_prev[2] !== bcd_result_expected_prev[2] )
		&& ((bcd_result_expected_prev[2] !== last_bcd_result_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[2] = bcd_result_expected_prev[2];
	end
	if (
		( bcd_result_expected_prev[3] !== 1'bx ) && ( bcd_result_prev[3] !== bcd_result_expected_prev[3] )
		&& ((bcd_result_expected_prev[3] !== last_bcd_result_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[3] = bcd_result_expected_prev[3];
	end
	if (
		( bcd_result_expected_prev[4] !== 1'bx ) && ( bcd_result_prev[4] !== bcd_result_expected_prev[4] )
		&& ((bcd_result_expected_prev[4] !== last_bcd_result_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[4] = bcd_result_expected_prev[4];
	end
	if (
		( bcd_result_expected_prev[5] !== 1'bx ) && ( bcd_result_prev[5] !== bcd_result_expected_prev[5] )
		&& ((bcd_result_expected_prev[5] !== last_bcd_result_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[5] = bcd_result_expected_prev[5];
	end
	if (
		( bcd_result_expected_prev[6] !== 1'bx ) && ( bcd_result_prev[6] !== bcd_result_expected_prev[6] )
		&& ((bcd_result_expected_prev[6] !== last_bcd_result_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[6] = bcd_result_expected_prev[6];
	end
	if (
		( bcd_result_expected_prev[7] !== 1'bx ) && ( bcd_result_prev[7] !== bcd_result_expected_prev[7] )
		&& ((bcd_result_expected_prev[7] !== last_bcd_result_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[7] = bcd_result_expected_prev[7];
	end
	if (
		( bcd_result_expected_prev[8] !== 1'bx ) && ( bcd_result_prev[8] !== bcd_result_expected_prev[8] )
		&& ((bcd_result_expected_prev[8] !== last_bcd_result_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[8] = bcd_result_expected_prev[8];
	end
	if (
		( bcd_result_expected_prev[9] !== 1'bx ) && ( bcd_result_prev[9] !== bcd_result_expected_prev[9] )
		&& ((bcd_result_expected_prev[9] !== last_bcd_result_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[9] = bcd_result_expected_prev[9];
	end
	if (
		( bcd_result_expected_prev[10] !== 1'bx ) && ( bcd_result_prev[10] !== bcd_result_expected_prev[10] )
		&& ((bcd_result_expected_prev[10] !== last_bcd_result_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[10] = bcd_result_expected_prev[10];
	end
	if (
		( bcd_result_expected_prev[11] !== 1'bx ) && ( bcd_result_prev[11] !== bcd_result_expected_prev[11] )
		&& ((bcd_result_expected_prev[11] !== last_bcd_result_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd_result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd_result_expected_prev);
		$display ("     Real value = %b", bcd_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd_result_exp[11] = bcd_result_expected_prev[11];
	end
	if (
		( first_operand_expected_prev[0] !== 1'bx ) && ( first_operand_prev[0] !== first_operand_expected_prev[0] )
		&& ((first_operand_expected_prev[0] !== last_first_operand_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_operand[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_operand_expected_prev);
		$display ("     Real value = %b", first_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_first_operand_exp[0] = first_operand_expected_prev[0];
	end
	if (
		( first_operand_expected_prev[1] !== 1'bx ) && ( first_operand_prev[1] !== first_operand_expected_prev[1] )
		&& ((first_operand_expected_prev[1] !== last_first_operand_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_operand[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_operand_expected_prev);
		$display ("     Real value = %b", first_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_first_operand_exp[1] = first_operand_expected_prev[1];
	end
	if (
		( first_operand_expected_prev[2] !== 1'bx ) && ( first_operand_prev[2] !== first_operand_expected_prev[2] )
		&& ((first_operand_expected_prev[2] !== last_first_operand_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_operand[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_operand_expected_prev);
		$display ("     Real value = %b", first_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_first_operand_exp[2] = first_operand_expected_prev[2];
	end
	if (
		( first_operand_expected_prev[3] !== 1'bx ) && ( first_operand_prev[3] !== first_operand_expected_prev[3] )
		&& ((first_operand_expected_prev[3] !== last_first_operand_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_operand[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_operand_expected_prev);
		$display ("     Real value = %b", first_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_first_operand_exp[3] = first_operand_expected_prev[3];
	end
	if (
		( first_operand_expected_prev[4] !== 1'bx ) && ( first_operand_prev[4] !== first_operand_expected_prev[4] )
		&& ((first_operand_expected_prev[4] !== last_first_operand_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_operand[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_operand_expected_prev);
		$display ("     Real value = %b", first_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_first_operand_exp[4] = first_operand_expected_prev[4];
	end
	if (
		( first_operand_expected_prev[5] !== 1'bx ) && ( first_operand_prev[5] !== first_operand_expected_prev[5] )
		&& ((first_operand_expected_prev[5] !== last_first_operand_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_operand[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_operand_expected_prev);
		$display ("     Real value = %b", first_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_first_operand_exp[5] = first_operand_expected_prev[5];
	end
	if (
		( first_operand_expected_prev[6] !== 1'bx ) && ( first_operand_prev[6] !== first_operand_expected_prev[6] )
		&& ((first_operand_expected_prev[6] !== last_first_operand_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_operand[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_operand_expected_prev);
		$display ("     Real value = %b", first_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_first_operand_exp[6] = first_operand_expected_prev[6];
	end
	if (
		( first_operand_expected_prev[7] !== 1'bx ) && ( first_operand_prev[7] !== first_operand_expected_prev[7] )
		&& ((first_operand_expected_prev[7] !== last_first_operand_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port first_operand[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", first_operand_expected_prev);
		$display ("     Real value = %b", first_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_first_operand_exp[7] = first_operand_expected_prev[7];
	end
	if (
		( hex0_expected_prev[0] !== 1'bx ) && ( hex0_prev[0] !== hex0_expected_prev[0] )
		&& ((hex0_expected_prev[0] !== last_hex0_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex0_exp[0] = hex0_expected_prev[0];
	end
	if (
		( hex0_expected_prev[1] !== 1'bx ) && ( hex0_prev[1] !== hex0_expected_prev[1] )
		&& ((hex0_expected_prev[1] !== last_hex0_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex0_exp[1] = hex0_expected_prev[1];
	end
	if (
		( hex0_expected_prev[2] !== 1'bx ) && ( hex0_prev[2] !== hex0_expected_prev[2] )
		&& ((hex0_expected_prev[2] !== last_hex0_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex0_exp[2] = hex0_expected_prev[2];
	end
	if (
		( hex0_expected_prev[3] !== 1'bx ) && ( hex0_prev[3] !== hex0_expected_prev[3] )
		&& ((hex0_expected_prev[3] !== last_hex0_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex0_exp[3] = hex0_expected_prev[3];
	end
	if (
		( hex0_expected_prev[4] !== 1'bx ) && ( hex0_prev[4] !== hex0_expected_prev[4] )
		&& ((hex0_expected_prev[4] !== last_hex0_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex0_exp[4] = hex0_expected_prev[4];
	end
	if (
		( hex0_expected_prev[5] !== 1'bx ) && ( hex0_prev[5] !== hex0_expected_prev[5] )
		&& ((hex0_expected_prev[5] !== last_hex0_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex0_exp[5] = hex0_expected_prev[5];
	end
	if (
		( hex0_expected_prev[6] !== 1'bx ) && ( hex0_prev[6] !== hex0_expected_prev[6] )
		&& ((hex0_expected_prev[6] !== last_hex0_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex0_exp[6] = hex0_expected_prev[6];
	end
	if (
		( hex0_result_expected_prev[0] !== 1'bx ) && ( hex0_result_prev[0] !== hex0_result_expected_prev[0] )
		&& ((hex0_result_expected_prev[0] !== last_hex0_result_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_result_expected_prev);
		$display ("     Real value = %b", hex0_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_result_exp[0] = hex0_result_expected_prev[0];
	end
	if (
		( hex0_result_expected_prev[1] !== 1'bx ) && ( hex0_result_prev[1] !== hex0_result_expected_prev[1] )
		&& ((hex0_result_expected_prev[1] !== last_hex0_result_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_result_expected_prev);
		$display ("     Real value = %b", hex0_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_result_exp[1] = hex0_result_expected_prev[1];
	end
	if (
		( hex0_result_expected_prev[2] !== 1'bx ) && ( hex0_result_prev[2] !== hex0_result_expected_prev[2] )
		&& ((hex0_result_expected_prev[2] !== last_hex0_result_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_result_expected_prev);
		$display ("     Real value = %b", hex0_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_result_exp[2] = hex0_result_expected_prev[2];
	end
	if (
		( hex0_result_expected_prev[3] !== 1'bx ) && ( hex0_result_prev[3] !== hex0_result_expected_prev[3] )
		&& ((hex0_result_expected_prev[3] !== last_hex0_result_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_result_expected_prev);
		$display ("     Real value = %b", hex0_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_result_exp[3] = hex0_result_expected_prev[3];
	end
	if (
		( hex0_result_expected_prev[4] !== 1'bx ) && ( hex0_result_prev[4] !== hex0_result_expected_prev[4] )
		&& ((hex0_result_expected_prev[4] !== last_hex0_result_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_result_expected_prev);
		$display ("     Real value = %b", hex0_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_result_exp[4] = hex0_result_expected_prev[4];
	end
	if (
		( hex0_result_expected_prev[5] !== 1'bx ) && ( hex0_result_prev[5] !== hex0_result_expected_prev[5] )
		&& ((hex0_result_expected_prev[5] !== last_hex0_result_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_result_expected_prev);
		$display ("     Real value = %b", hex0_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_result_exp[5] = hex0_result_expected_prev[5];
	end
	if (
		( hex0_result_expected_prev[6] !== 1'bx ) && ( hex0_result_prev[6] !== hex0_result_expected_prev[6] )
		&& ((hex0_result_expected_prev[6] !== last_hex0_result_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_result_expected_prev);
		$display ("     Real value = %b", hex0_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_result_exp[6] = hex0_result_expected_prev[6];
	end
	if (
		( hex1_expected_prev[0] !== 1'bx ) && ( hex1_prev[0] !== hex1_expected_prev[0] )
		&& ((hex1_expected_prev[0] !== last_hex1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[0] = hex1_expected_prev[0];
	end
	if (
		( hex1_expected_prev[1] !== 1'bx ) && ( hex1_prev[1] !== hex1_expected_prev[1] )
		&& ((hex1_expected_prev[1] !== last_hex1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[1] = hex1_expected_prev[1];
	end
	if (
		( hex1_expected_prev[2] !== 1'bx ) && ( hex1_prev[2] !== hex1_expected_prev[2] )
		&& ((hex1_expected_prev[2] !== last_hex1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[2] = hex1_expected_prev[2];
	end
	if (
		( hex1_expected_prev[3] !== 1'bx ) && ( hex1_prev[3] !== hex1_expected_prev[3] )
		&& ((hex1_expected_prev[3] !== last_hex1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[3] = hex1_expected_prev[3];
	end
	if (
		( hex1_expected_prev[4] !== 1'bx ) && ( hex1_prev[4] !== hex1_expected_prev[4] )
		&& ((hex1_expected_prev[4] !== last_hex1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[4] = hex1_expected_prev[4];
	end
	if (
		( hex1_expected_prev[5] !== 1'bx ) && ( hex1_prev[5] !== hex1_expected_prev[5] )
		&& ((hex1_expected_prev[5] !== last_hex1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[5] = hex1_expected_prev[5];
	end
	if (
		( hex1_expected_prev[6] !== 1'bx ) && ( hex1_prev[6] !== hex1_expected_prev[6] )
		&& ((hex1_expected_prev[6] !== last_hex1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[6] = hex1_expected_prev[6];
	end
	if (
		( hex1_result_expected_prev[0] !== 1'bx ) && ( hex1_result_prev[0] !== hex1_result_expected_prev[0] )
		&& ((hex1_result_expected_prev[0] !== last_hex1_result_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_result_expected_prev);
		$display ("     Real value = %b", hex1_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex1_result_exp[0] = hex1_result_expected_prev[0];
	end
	if (
		( hex1_result_expected_prev[1] !== 1'bx ) && ( hex1_result_prev[1] !== hex1_result_expected_prev[1] )
		&& ((hex1_result_expected_prev[1] !== last_hex1_result_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_result_expected_prev);
		$display ("     Real value = %b", hex1_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex1_result_exp[1] = hex1_result_expected_prev[1];
	end
	if (
		( hex1_result_expected_prev[2] !== 1'bx ) && ( hex1_result_prev[2] !== hex1_result_expected_prev[2] )
		&& ((hex1_result_expected_prev[2] !== last_hex1_result_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_result_expected_prev);
		$display ("     Real value = %b", hex1_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex1_result_exp[2] = hex1_result_expected_prev[2];
	end
	if (
		( hex1_result_expected_prev[3] !== 1'bx ) && ( hex1_result_prev[3] !== hex1_result_expected_prev[3] )
		&& ((hex1_result_expected_prev[3] !== last_hex1_result_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_result_expected_prev);
		$display ("     Real value = %b", hex1_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex1_result_exp[3] = hex1_result_expected_prev[3];
	end
	if (
		( hex1_result_expected_prev[4] !== 1'bx ) && ( hex1_result_prev[4] !== hex1_result_expected_prev[4] )
		&& ((hex1_result_expected_prev[4] !== last_hex1_result_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_result_expected_prev);
		$display ("     Real value = %b", hex1_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex1_result_exp[4] = hex1_result_expected_prev[4];
	end
	if (
		( hex1_result_expected_prev[5] !== 1'bx ) && ( hex1_result_prev[5] !== hex1_result_expected_prev[5] )
		&& ((hex1_result_expected_prev[5] !== last_hex1_result_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_result_expected_prev);
		$display ("     Real value = %b", hex1_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex1_result_exp[5] = hex1_result_expected_prev[5];
	end
	if (
		( hex1_result_expected_prev[6] !== 1'bx ) && ( hex1_result_prev[6] !== hex1_result_expected_prev[6] )
		&& ((hex1_result_expected_prev[6] !== last_hex1_result_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_result_expected_prev);
		$display ("     Real value = %b", hex1_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex1_result_exp[6] = hex1_result_expected_prev[6];
	end
	if (
		( hex2_expected_prev[0] !== 1'bx ) && ( hex2_prev[0] !== hex2_expected_prev[0] )
		&& ((hex2_expected_prev[0] !== last_hex2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex2_exp[0] = hex2_expected_prev[0];
	end
	if (
		( hex2_expected_prev[1] !== 1'bx ) && ( hex2_prev[1] !== hex2_expected_prev[1] )
		&& ((hex2_expected_prev[1] !== last_hex2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex2_exp[1] = hex2_expected_prev[1];
	end
	if (
		( hex2_expected_prev[2] !== 1'bx ) && ( hex2_prev[2] !== hex2_expected_prev[2] )
		&& ((hex2_expected_prev[2] !== last_hex2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex2_exp[2] = hex2_expected_prev[2];
	end
	if (
		( hex2_expected_prev[3] !== 1'bx ) && ( hex2_prev[3] !== hex2_expected_prev[3] )
		&& ((hex2_expected_prev[3] !== last_hex2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex2_exp[3] = hex2_expected_prev[3];
	end
	if (
		( hex2_expected_prev[4] !== 1'bx ) && ( hex2_prev[4] !== hex2_expected_prev[4] )
		&& ((hex2_expected_prev[4] !== last_hex2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex2_exp[4] = hex2_expected_prev[4];
	end
	if (
		( hex2_expected_prev[5] !== 1'bx ) && ( hex2_prev[5] !== hex2_expected_prev[5] )
		&& ((hex2_expected_prev[5] !== last_hex2_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex2_exp[5] = hex2_expected_prev[5];
	end
	if (
		( hex2_expected_prev[6] !== 1'bx ) && ( hex2_prev[6] !== hex2_expected_prev[6] )
		&& ((hex2_expected_prev[6] !== last_hex2_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_hex2_exp[6] = hex2_expected_prev[6];
	end
	if (
		( hex2_result_expected_prev[0] !== 1'bx ) && ( hex2_result_prev[0] !== hex2_result_expected_prev[0] )
		&& ((hex2_result_expected_prev[0] !== last_hex2_result_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_result_expected_prev);
		$display ("     Real value = %b", hex2_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex2_result_exp[0] = hex2_result_expected_prev[0];
	end
	if (
		( hex2_result_expected_prev[1] !== 1'bx ) && ( hex2_result_prev[1] !== hex2_result_expected_prev[1] )
		&& ((hex2_result_expected_prev[1] !== last_hex2_result_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_result_expected_prev);
		$display ("     Real value = %b", hex2_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex2_result_exp[1] = hex2_result_expected_prev[1];
	end
	if (
		( hex2_result_expected_prev[2] !== 1'bx ) && ( hex2_result_prev[2] !== hex2_result_expected_prev[2] )
		&& ((hex2_result_expected_prev[2] !== last_hex2_result_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_result_expected_prev);
		$display ("     Real value = %b", hex2_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex2_result_exp[2] = hex2_result_expected_prev[2];
	end
	if (
		( hex2_result_expected_prev[3] !== 1'bx ) && ( hex2_result_prev[3] !== hex2_result_expected_prev[3] )
		&& ((hex2_result_expected_prev[3] !== last_hex2_result_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_result_expected_prev);
		$display ("     Real value = %b", hex2_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex2_result_exp[3] = hex2_result_expected_prev[3];
	end
	if (
		( hex2_result_expected_prev[4] !== 1'bx ) && ( hex2_result_prev[4] !== hex2_result_expected_prev[4] )
		&& ((hex2_result_expected_prev[4] !== last_hex2_result_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_result_expected_prev);
		$display ("     Real value = %b", hex2_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex2_result_exp[4] = hex2_result_expected_prev[4];
	end
	if (
		( hex2_result_expected_prev[5] !== 1'bx ) && ( hex2_result_prev[5] !== hex2_result_expected_prev[5] )
		&& ((hex2_result_expected_prev[5] !== last_hex2_result_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_result_expected_prev);
		$display ("     Real value = %b", hex2_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex2_result_exp[5] = hex2_result_expected_prev[5];
	end
	if (
		( hex2_result_expected_prev[6] !== 1'bx ) && ( hex2_result_prev[6] !== hex2_result_expected_prev[6] )
		&& ((hex2_result_expected_prev[6] !== last_hex2_result_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_result_expected_prev);
		$display ("     Real value = %b", hex2_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_hex2_result_exp[6] = hex2_result_expected_prev[6];
	end
	if (
		( hex3_expected_prev[0] !== 1'bx ) && ( hex3_prev[0] !== hex3_expected_prev[0] )
		&& ((hex3_expected_prev[0] !== last_hex3_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_hex3_exp[0] = hex3_expected_prev[0];
	end
	if (
		( hex3_expected_prev[1] !== 1'bx ) && ( hex3_prev[1] !== hex3_expected_prev[1] )
		&& ((hex3_expected_prev[1] !== last_hex3_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_hex3_exp[1] = hex3_expected_prev[1];
	end
	if (
		( hex3_expected_prev[2] !== 1'bx ) && ( hex3_prev[2] !== hex3_expected_prev[2] )
		&& ((hex3_expected_prev[2] !== last_hex3_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_hex3_exp[2] = hex3_expected_prev[2];
	end
	if (
		( hex3_expected_prev[3] !== 1'bx ) && ( hex3_prev[3] !== hex3_expected_prev[3] )
		&& ((hex3_expected_prev[3] !== last_hex3_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_hex3_exp[3] = hex3_expected_prev[3];
	end
	if (
		( hex3_expected_prev[4] !== 1'bx ) && ( hex3_prev[4] !== hex3_expected_prev[4] )
		&& ((hex3_expected_prev[4] !== last_hex3_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_hex3_exp[4] = hex3_expected_prev[4];
	end
	if (
		( hex3_expected_prev[5] !== 1'bx ) && ( hex3_prev[5] !== hex3_expected_prev[5] )
		&& ((hex3_expected_prev[5] !== last_hex3_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_hex3_exp[5] = hex3_expected_prev[5];
	end
	if (
		( hex3_expected_prev[6] !== 1'bx ) && ( hex3_prev[6] !== hex3_expected_prev[6] )
		&& ((hex3_expected_prev[6] !== last_hex3_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_hex3_exp[6] = hex3_expected_prev[6];
	end
	if (
		( hex3_result_sign_expected_prev[0] !== 1'bx ) && ( hex3_result_sign_prev[0] !== hex3_result_sign_expected_prev[0] )
		&& ((hex3_result_sign_expected_prev[0] !== last_hex3_result_sign_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3_result_sign[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_result_sign_expected_prev);
		$display ("     Real value = %b", hex3_result_sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_hex3_result_sign_exp[0] = hex3_result_sign_expected_prev[0];
	end
	if (
		( hex3_result_sign_expected_prev[1] !== 1'bx ) && ( hex3_result_sign_prev[1] !== hex3_result_sign_expected_prev[1] )
		&& ((hex3_result_sign_expected_prev[1] !== last_hex3_result_sign_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3_result_sign[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_result_sign_expected_prev);
		$display ("     Real value = %b", hex3_result_sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_hex3_result_sign_exp[1] = hex3_result_sign_expected_prev[1];
	end
	if (
		( hex3_result_sign_expected_prev[2] !== 1'bx ) && ( hex3_result_sign_prev[2] !== hex3_result_sign_expected_prev[2] )
		&& ((hex3_result_sign_expected_prev[2] !== last_hex3_result_sign_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3_result_sign[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_result_sign_expected_prev);
		$display ("     Real value = %b", hex3_result_sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_hex3_result_sign_exp[2] = hex3_result_sign_expected_prev[2];
	end
	if (
		( hex3_result_sign_expected_prev[3] !== 1'bx ) && ( hex3_result_sign_prev[3] !== hex3_result_sign_expected_prev[3] )
		&& ((hex3_result_sign_expected_prev[3] !== last_hex3_result_sign_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3_result_sign[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_result_sign_expected_prev);
		$display ("     Real value = %b", hex3_result_sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_hex3_result_sign_exp[3] = hex3_result_sign_expected_prev[3];
	end
	if (
		( hex3_result_sign_expected_prev[4] !== 1'bx ) && ( hex3_result_sign_prev[4] !== hex3_result_sign_expected_prev[4] )
		&& ((hex3_result_sign_expected_prev[4] !== last_hex3_result_sign_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3_result_sign[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_result_sign_expected_prev);
		$display ("     Real value = %b", hex3_result_sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_hex3_result_sign_exp[4] = hex3_result_sign_expected_prev[4];
	end
	if (
		( hex3_result_sign_expected_prev[5] !== 1'bx ) && ( hex3_result_sign_prev[5] !== hex3_result_sign_expected_prev[5] )
		&& ((hex3_result_sign_expected_prev[5] !== last_hex3_result_sign_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3_result_sign[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_result_sign_expected_prev);
		$display ("     Real value = %b", hex3_result_sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_hex3_result_sign_exp[5] = hex3_result_sign_expected_prev[5];
	end
	if (
		( hex3_result_sign_expected_prev[6] !== 1'bx ) && ( hex3_result_sign_prev[6] !== hex3_result_sign_expected_prev[6] )
		&& ((hex3_result_sign_expected_prev[6] !== last_hex3_result_sign_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3_result_sign[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_result_sign_expected_prev);
		$display ("     Real value = %b", hex3_result_sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_hex3_result_sign_exp[6] = hex3_result_sign_expected_prev[6];
	end
	if (
		( ledg_expected_prev[0] !== 1'bx ) && ( ledg_prev[0] !== ledg_expected_prev[0] )
		&& ((ledg_expected_prev[0] !== last_ledg_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg_expected_prev);
		$display ("     Real value = %b", ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ledg_exp[0] = ledg_expected_prev[0];
	end
	if (
		( ledg_expected_prev[1] !== 1'bx ) && ( ledg_prev[1] !== ledg_expected_prev[1] )
		&& ((ledg_expected_prev[1] !== last_ledg_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg_expected_prev);
		$display ("     Real value = %b", ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ledg_exp[1] = ledg_expected_prev[1];
	end
	if (
		( ledg_expected_prev[2] !== 1'bx ) && ( ledg_prev[2] !== ledg_expected_prev[2] )
		&& ((ledg_expected_prev[2] !== last_ledg_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg_expected_prev);
		$display ("     Real value = %b", ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ledg_exp[2] = ledg_expected_prev[2];
	end
	if (
		( ledg_expected_prev[3] !== 1'bx ) && ( ledg_prev[3] !== ledg_expected_prev[3] )
		&& ((ledg_expected_prev[3] !== last_ledg_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg_expected_prev);
		$display ("     Real value = %b", ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ledg_exp[3] = ledg_expected_prev[3];
	end
	if (
		( ledg_expected_prev[4] !== 1'bx ) && ( ledg_prev[4] !== ledg_expected_prev[4] )
		&& ((ledg_expected_prev[4] !== last_ledg_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg_expected_prev);
		$display ("     Real value = %b", ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ledg_exp[4] = ledg_expected_prev[4];
	end
	if (
		( ledg_expected_prev[5] !== 1'bx ) && ( ledg_prev[5] !== ledg_expected_prev[5] )
		&& ((ledg_expected_prev[5] !== last_ledg_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg_expected_prev);
		$display ("     Real value = %b", ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ledg_exp[5] = ledg_expected_prev[5];
	end
	if (
		( ledg_expected_prev[6] !== 1'bx ) && ( ledg_prev[6] !== ledg_expected_prev[6] )
		&& ((ledg_expected_prev[6] !== last_ledg_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg_expected_prev);
		$display ("     Real value = %b", ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ledg_exp[6] = ledg_expected_prev[6];
	end
	if (
		( ledg_expected_prev[7] !== 1'bx ) && ( ledg_prev[7] !== ledg_expected_prev[7] )
		&& ((ledg_expected_prev[7] !== last_ledg_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg_expected_prev);
		$display ("     Real value = %b", ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ledg_exp[7] = ledg_expected_prev[7];
	end
	if (
		( ledr_expected_prev[0] !== 1'bx ) && ( ledr_prev[0] !== ledr_expected_prev[0] )
		&& ((ledr_expected_prev[0] !== last_ledr_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ledr_exp[0] = ledr_expected_prev[0];
	end
	if (
		( ledr_expected_prev[1] !== 1'bx ) && ( ledr_prev[1] !== ledr_expected_prev[1] )
		&& ((ledr_expected_prev[1] !== last_ledr_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ledr_exp[1] = ledr_expected_prev[1];
	end
	if (
		( ledr_expected_prev[2] !== 1'bx ) && ( ledr_prev[2] !== ledr_expected_prev[2] )
		&& ((ledr_expected_prev[2] !== last_ledr_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ledr_exp[2] = ledr_expected_prev[2];
	end
	if (
		( ledr_expected_prev[3] !== 1'bx ) && ( ledr_prev[3] !== ledr_expected_prev[3] )
		&& ((ledr_expected_prev[3] !== last_ledr_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ledr_exp[3] = ledr_expected_prev[3];
	end
	if (
		( ledr_expected_prev[4] !== 1'bx ) && ( ledr_prev[4] !== ledr_expected_prev[4] )
		&& ((ledr_expected_prev[4] !== last_ledr_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ledr_exp[4] = ledr_expected_prev[4];
	end
	if (
		( ledr_expected_prev[5] !== 1'bx ) && ( ledr_prev[5] !== ledr_expected_prev[5] )
		&& ((ledr_expected_prev[5] !== last_ledr_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ledr_exp[5] = ledr_expected_prev[5];
	end
	if (
		( ledr_expected_prev[6] !== 1'bx ) && ( ledr_prev[6] !== ledr_expected_prev[6] )
		&& ((ledr_expected_prev[6] !== last_ledr_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ledr_exp[6] = ledr_expected_prev[6];
	end
	if (
		( ledr_expected_prev[7] !== 1'bx ) && ( ledr_prev[7] !== ledr_expected_prev[7] )
		&& ((ledr_expected_prev[7] !== last_ledr_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ledr_exp[7] = ledr_expected_prev[7];
	end
	if (
		( ledr_expected_prev[8] !== 1'bx ) && ( ledr_prev[8] !== ledr_expected_prev[8] )
		&& ((ledr_expected_prev[8] !== last_ledr_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ledr_exp[8] = ledr_expected_prev[8];
	end
	if (
		( ledr_expected_prev[9] !== 1'bx ) && ( ledr_prev[9] !== ledr_expected_prev[9] )
		&& ((ledr_expected_prev[9] !== last_ledr_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ledr_exp[9] = ledr_expected_prev[9];
	end
	if (
		( operation_overflow_expected_prev !== 1'bx ) && ( operation_overflow_prev !== operation_overflow_expected_prev )
		&& ((operation_overflow_expected_prev !== last_operation_overflow_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation_overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_overflow_expected_prev);
		$display ("     Real value = %b", operation_overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_operation_overflow_exp = operation_overflow_expected_prev;
	end
	if (
		( operation_result_expected_prev[0] !== 1'bx ) && ( operation_result_prev[0] !== operation_result_expected_prev[0] )
		&& ((operation_result_expected_prev[0] !== last_operation_result_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_result_expected_prev);
		$display ("     Real value = %b", operation_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_operation_result_exp[0] = operation_result_expected_prev[0];
	end
	if (
		( operation_result_expected_prev[1] !== 1'bx ) && ( operation_result_prev[1] !== operation_result_expected_prev[1] )
		&& ((operation_result_expected_prev[1] !== last_operation_result_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_result_expected_prev);
		$display ("     Real value = %b", operation_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_operation_result_exp[1] = operation_result_expected_prev[1];
	end
	if (
		( operation_result_expected_prev[2] !== 1'bx ) && ( operation_result_prev[2] !== operation_result_expected_prev[2] )
		&& ((operation_result_expected_prev[2] !== last_operation_result_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_result_expected_prev);
		$display ("     Real value = %b", operation_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_operation_result_exp[2] = operation_result_expected_prev[2];
	end
	if (
		( operation_result_expected_prev[3] !== 1'bx ) && ( operation_result_prev[3] !== operation_result_expected_prev[3] )
		&& ((operation_result_expected_prev[3] !== last_operation_result_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_result_expected_prev);
		$display ("     Real value = %b", operation_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_operation_result_exp[3] = operation_result_expected_prev[3];
	end
	if (
		( operation_result_expected_prev[4] !== 1'bx ) && ( operation_result_prev[4] !== operation_result_expected_prev[4] )
		&& ((operation_result_expected_prev[4] !== last_operation_result_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_result_expected_prev);
		$display ("     Real value = %b", operation_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_operation_result_exp[4] = operation_result_expected_prev[4];
	end
	if (
		( operation_result_expected_prev[5] !== 1'bx ) && ( operation_result_prev[5] !== operation_result_expected_prev[5] )
		&& ((operation_result_expected_prev[5] !== last_operation_result_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_result_expected_prev);
		$display ("     Real value = %b", operation_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_operation_result_exp[5] = operation_result_expected_prev[5];
	end
	if (
		( operation_result_expected_prev[6] !== 1'bx ) && ( operation_result_prev[6] !== operation_result_expected_prev[6] )
		&& ((operation_result_expected_prev[6] !== last_operation_result_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_result_expected_prev);
		$display ("     Real value = %b", operation_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_operation_result_exp[6] = operation_result_expected_prev[6];
	end
	if (
		( operation_result_expected_prev[7] !== 1'bx ) && ( operation_result_prev[7] !== operation_result_expected_prev[7] )
		&& ((operation_result_expected_prev[7] !== last_operation_result_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operation_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operation_result_expected_prev);
		$display ("     Real value = %b", operation_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_operation_result_exp[7] = operation_result_expected_prev[7];
	end
	if (
		( operator_expected_prev[0] !== 1'bx ) && ( operator_prev[0] !== operator_expected_prev[0] )
		&& ((operator_expected_prev[0] !== last_operator_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operator[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operator_expected_prev);
		$display ("     Real value = %b", operator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_operator_exp[0] = operator_expected_prev[0];
	end
	if (
		( operator_expected_prev[1] !== 1'bx ) && ( operator_prev[1] !== operator_expected_prev[1] )
		&& ((operator_expected_prev[1] !== last_operator_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port operator[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", operator_expected_prev);
		$display ("     Real value = %b", operator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_operator_exp[1] = operator_expected_prev[1];
	end
	if (
		( pwm_out_expected_prev !== 1'bx ) && ( pwm_out_prev !== pwm_out_expected_prev )
		&& ((pwm_out_expected_prev !== last_pwm_out_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_out_expected_prev);
		$display ("     Real value = %b", pwm_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_pwm_out_exp = pwm_out_expected_prev;
	end
	if (
		( pwm_out_vector_expected_prev[0] !== 1'bx ) && ( pwm_out_vector_prev[0] !== pwm_out_vector_expected_prev[0] )
		&& ((pwm_out_vector_expected_prev[0] !== last_pwm_out_vector_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_out_vector[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_out_vector_expected_prev);
		$display ("     Real value = %b", pwm_out_vector_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pwm_out_vector_exp[0] = pwm_out_vector_expected_prev[0];
	end
	if (
		( pwm_out_vector_expected_prev[1] !== 1'bx ) && ( pwm_out_vector_prev[1] !== pwm_out_vector_expected_prev[1] )
		&& ((pwm_out_vector_expected_prev[1] !== last_pwm_out_vector_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_out_vector[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_out_vector_expected_prev);
		$display ("     Real value = %b", pwm_out_vector_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pwm_out_vector_exp[1] = pwm_out_vector_expected_prev[1];
	end
	if (
		( pwm_out_vector_expected_prev[2] !== 1'bx ) && ( pwm_out_vector_prev[2] !== pwm_out_vector_expected_prev[2] )
		&& ((pwm_out_vector_expected_prev[2] !== last_pwm_out_vector_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_out_vector[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_out_vector_expected_prev);
		$display ("     Real value = %b", pwm_out_vector_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pwm_out_vector_exp[2] = pwm_out_vector_expected_prev[2];
	end
	if (
		( pwm_out_vector_expected_prev[3] !== 1'bx ) && ( pwm_out_vector_prev[3] !== pwm_out_vector_expected_prev[3] )
		&& ((pwm_out_vector_expected_prev[3] !== last_pwm_out_vector_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_out_vector[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_out_vector_expected_prev);
		$display ("     Real value = %b", pwm_out_vector_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pwm_out_vector_exp[3] = pwm_out_vector_expected_prev[3];
	end
	if (
		( pwm_out_vector_expected_prev[4] !== 1'bx ) && ( pwm_out_vector_prev[4] !== pwm_out_vector_expected_prev[4] )
		&& ((pwm_out_vector_expected_prev[4] !== last_pwm_out_vector_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_out_vector[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_out_vector_expected_prev);
		$display ("     Real value = %b", pwm_out_vector_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pwm_out_vector_exp[4] = pwm_out_vector_expected_prev[4];
	end
	if (
		( pwm_out_vector_expected_prev[5] !== 1'bx ) && ( pwm_out_vector_prev[5] !== pwm_out_vector_expected_prev[5] )
		&& ((pwm_out_vector_expected_prev[5] !== last_pwm_out_vector_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_out_vector[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_out_vector_expected_prev);
		$display ("     Real value = %b", pwm_out_vector_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pwm_out_vector_exp[5] = pwm_out_vector_expected_prev[5];
	end
	if (
		( pwm_out_vector_expected_prev[6] !== 1'bx ) && ( pwm_out_vector_prev[6] !== pwm_out_vector_expected_prev[6] )
		&& ((pwm_out_vector_expected_prev[6] !== last_pwm_out_vector_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pwm_out_vector[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pwm_out_vector_expected_prev);
		$display ("     Real value = %b", pwm_out_vector_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_pwm_out_vector_exp[6] = pwm_out_vector_expected_prev[6];
	end
	if (
		( second_operand_expected_prev[0] !== 1'bx ) && ( second_operand_prev[0] !== second_operand_expected_prev[0] )
		&& ((second_operand_expected_prev[0] !== last_second_operand_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port second_operand[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", second_operand_expected_prev);
		$display ("     Real value = %b", second_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_second_operand_exp[0] = second_operand_expected_prev[0];
	end
	if (
		( second_operand_expected_prev[1] !== 1'bx ) && ( second_operand_prev[1] !== second_operand_expected_prev[1] )
		&& ((second_operand_expected_prev[1] !== last_second_operand_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port second_operand[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", second_operand_expected_prev);
		$display ("     Real value = %b", second_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_second_operand_exp[1] = second_operand_expected_prev[1];
	end
	if (
		( second_operand_expected_prev[2] !== 1'bx ) && ( second_operand_prev[2] !== second_operand_expected_prev[2] )
		&& ((second_operand_expected_prev[2] !== last_second_operand_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port second_operand[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", second_operand_expected_prev);
		$display ("     Real value = %b", second_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_second_operand_exp[2] = second_operand_expected_prev[2];
	end
	if (
		( second_operand_expected_prev[3] !== 1'bx ) && ( second_operand_prev[3] !== second_operand_expected_prev[3] )
		&& ((second_operand_expected_prev[3] !== last_second_operand_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port second_operand[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", second_operand_expected_prev);
		$display ("     Real value = %b", second_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_second_operand_exp[3] = second_operand_expected_prev[3];
	end
	if (
		( second_operand_expected_prev[4] !== 1'bx ) && ( second_operand_prev[4] !== second_operand_expected_prev[4] )
		&& ((second_operand_expected_prev[4] !== last_second_operand_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port second_operand[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", second_operand_expected_prev);
		$display ("     Real value = %b", second_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_second_operand_exp[4] = second_operand_expected_prev[4];
	end
	if (
		( second_operand_expected_prev[5] !== 1'bx ) && ( second_operand_prev[5] !== second_operand_expected_prev[5] )
		&& ((second_operand_expected_prev[5] !== last_second_operand_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port second_operand[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", second_operand_expected_prev);
		$display ("     Real value = %b", second_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_second_operand_exp[5] = second_operand_expected_prev[5];
	end
	if (
		( second_operand_expected_prev[6] !== 1'bx ) && ( second_operand_prev[6] !== second_operand_expected_prev[6] )
		&& ((second_operand_expected_prev[6] !== last_second_operand_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port second_operand[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", second_operand_expected_prev);
		$display ("     Real value = %b", second_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_second_operand_exp[6] = second_operand_expected_prev[6];
	end
	if (
		( second_operand_expected_prev[7] !== 1'bx ) && ( second_operand_prev[7] !== second_operand_expected_prev[7] )
		&& ((second_operand_expected_prev[7] !== last_second_operand_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port second_operand[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", second_operand_expected_prev);
		$display ("     Real value = %b", second_operand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_second_operand_exp[7] = second_operand_expected_prev[7];
	end
	if (
		( set_operator_expected_prev !== 1'bx ) && ( set_operator_prev !== set_operator_expected_prev )
		&& ((set_operator_expected_prev !== last_set_operator_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port set_operator :: @time = %t",  $realtime);
		$display ("     Expected value = %b", set_operator_expected_prev);
		$display ("     Real value = %b", set_operator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_set_operator_exp = set_operator_expected_prev;
	end
	if (
		( stack_pop_expected_prev !== 1'bx ) && ( stack_pop_prev !== stack_pop_expected_prev )
		&& ((stack_pop_expected_prev !== last_stack_pop_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_pop :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_pop_expected_prev);
		$display ("     Real value = %b", stack_pop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_stack_pop_exp = stack_pop_expected_prev;
	end
	if (
		( stack_push_expected_prev !== 1'bx ) && ( stack_push_prev !== stack_push_expected_prev )
		&& ((stack_push_expected_prev !== last_stack_push_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_expected_prev);
		$display ("     Real value = %b", stack_push_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_stack_push_exp = stack_push_expected_prev;
	end
	if (
		( stack_push_value_expected_prev[0] !== 1'bx ) && ( stack_push_value_prev[0] !== stack_push_value_expected_prev[0] )
		&& ((stack_push_value_expected_prev[0] !== last_stack_push_value_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_stack_push_value_exp[0] = stack_push_value_expected_prev[0];
	end
	if (
		( stack_push_value_expected_prev[1] !== 1'bx ) && ( stack_push_value_prev[1] !== stack_push_value_expected_prev[1] )
		&& ((stack_push_value_expected_prev[1] !== last_stack_push_value_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_stack_push_value_exp[1] = stack_push_value_expected_prev[1];
	end
	if (
		( stack_push_value_expected_prev[2] !== 1'bx ) && ( stack_push_value_prev[2] !== stack_push_value_expected_prev[2] )
		&& ((stack_push_value_expected_prev[2] !== last_stack_push_value_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_stack_push_value_exp[2] = stack_push_value_expected_prev[2];
	end
	if (
		( stack_push_value_expected_prev[3] !== 1'bx ) && ( stack_push_value_prev[3] !== stack_push_value_expected_prev[3] )
		&& ((stack_push_value_expected_prev[3] !== last_stack_push_value_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_stack_push_value_exp[3] = stack_push_value_expected_prev[3];
	end
	if (
		( stack_push_value_expected_prev[4] !== 1'bx ) && ( stack_push_value_prev[4] !== stack_push_value_expected_prev[4] )
		&& ((stack_push_value_expected_prev[4] !== last_stack_push_value_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_stack_push_value_exp[4] = stack_push_value_expected_prev[4];
	end
	if (
		( stack_push_value_expected_prev[5] !== 1'bx ) && ( stack_push_value_prev[5] !== stack_push_value_expected_prev[5] )
		&& ((stack_push_value_expected_prev[5] !== last_stack_push_value_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_stack_push_value_exp[5] = stack_push_value_expected_prev[5];
	end
	if (
		( stack_push_value_expected_prev[6] !== 1'bx ) && ( stack_push_value_prev[6] !== stack_push_value_expected_prev[6] )
		&& ((stack_push_value_expected_prev[6] !== last_stack_push_value_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_stack_push_value_exp[6] = stack_push_value_expected_prev[6];
	end
	if (
		( stack_push_value_expected_prev[7] !== 1'bx ) && ( stack_push_value_prev[7] !== stack_push_value_expected_prev[7] )
		&& ((stack_push_value_expected_prev[7] !== last_stack_push_value_exp[7]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stack_push_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stack_push_value_expected_prev);
		$display ("     Real value = %b", stack_push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_stack_push_value_exp[7] = stack_push_value_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module calculadora_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock_50;
reg [3:0] key;
reg [9:0] sw;
// wires                                               
wire [11:0] bcd_result;
wire [7:0] first_operand;
wire [6:0] hex0;
wire [6:0] hex0_result;
wire [6:0] hex1;
wire [6:0] hex1_result;
wire [6:0] hex2;
wire [6:0] hex2_result;
wire [6:0] hex3;
wire [6:0] hex3_result_sign;
wire [7:0] ledg;
wire [9:0] ledr;
wire operation_overflow;
wire [7:0] operation_result;
wire [1:0] operator;
wire pwm_out;
wire [6:0] pwm_out_vector;
wire [7:0] second_operand;
wire set_operator;
wire stack_pop;
wire stack_push;
wire [7:0] stack_push_value;

wire sampler;                             

// assign statements (if any)                          
calculadora i1 (
// port map - connection between master ports and signals/registers   
	.bcd_result(bcd_result),
	.clock_50(clock_50),
	.first_operand(first_operand),
	.hex0(hex0),
	.hex0_result(hex0_result),
	.hex1(hex1),
	.hex1_result(hex1_result),
	.hex2(hex2),
	.hex2_result(hex2_result),
	.hex3(hex3),
	.hex3_result_sign(hex3_result_sign),
	.key(key),
	.ledg(ledg),
	.ledr(ledr),
	.operation_overflow(operation_overflow),
	.operation_result(operation_result),
	.operator(operator),
	.pwm_out(pwm_out),
	.pwm_out_vector(pwm_out_vector),
	.second_operand(second_operand),
	.set_operator(set_operator),
	.stack_pop(stack_pop),
	.stack_push(stack_push),
	.stack_push_value(stack_push_value),
	.sw(sw)
);

// clock_50
always
begin
	clock_50 = 1'b0;
	clock_50 = #1000 1'b1;
	#1000;
end 

// sw[9]
initial
begin
	sw[9] = 1'b0;
	sw[9] = #850000 1'b1;
	sw[9] = #20000 1'b0;
end 

// sw[8]
initial
begin
	sw[8] = 1'b0;
end 

// sw[7]
initial
begin
	sw[7] = 1'b0;
	sw[7] = #860000 1'b1;
	sw[7] = #10000 1'b0;
end 

// sw[6]
initial
begin
	sw[6] = 1'b0;
end 

// sw[5]
initial
begin
	sw[5] = 1'b0;
end 

// sw[4]
initial
begin
	sw[4] = 1'b0;
end 

// sw[3]
initial
begin
	sw[3] = 1'b0;
	sw[3] = #90000 1'b1;
	sw[3] = #30000 1'b0;
end 

// sw[2]
initial
begin
	sw[2] = 1'b1;
	sw[2] = #10000 1'b0;
	sw[2] = #30000 1'b1;
	sw[2] = #20000 1'b0;
	sw[2] = #120000 1'b1;
	sw[2] = #30000 1'b0;
end 

// sw[1]
initial
begin
	sw[1] = 1'b0;
	sw[1] = #10000 1'b1;
	sw[1] = #20000 1'b0;
	sw[1] = #110000 1'b1;
	sw[1] = #30000 1'b0;
	sw[1] = #20000 1'b1;
	sw[1] = #20000 1'b0;
end 

// sw[0]
initial
begin
	sw[0] = 1'b1;
	sw[0] = #10000 1'b0;
	sw[0] = #10000 1'b1;
	sw[0] = #10000 1'b0;
	sw[0] = #10000 1'b1;
	sw[0] = #10000 1'b0;
	sw[0] = #20000 1'b1;
	sw[0] = #10000 1'b0;
	sw[0] = #20000 1'b1;
	sw[0] = #10000 1'b0;
	sw[0] = #30000 1'b1;
	sw[0] = #20000 1'b0;
	sw[0] = #30000 1'b1;
	sw[0] = #20000 1'b0;
end 
// key[ 3 ]
initial
begin
	key[3] = 1'b1;
	key[3] = #390000 1'b0;
	key[3] = #10000 1'b1;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b1;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b1;
	key[1] = #120000 1'b0;
	key[1] = #10000 1'b1;
	key[1] = #170000 1'b0;
	key[1] = #50000 1'b1;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b1;
	key[0] = #480000 1'b0;
	key[0] = #20000 1'b1;
end 

calculadora_vlg_sample_tst tb_sample (
	.clock_50(clock_50),
	.key(key),
	.sw(sw),
	.sampler_tx(sampler)
);

calculadora_vlg_check_tst tb_out(
	.bcd_result(bcd_result),
	.first_operand(first_operand),
	.hex0(hex0),
	.hex0_result(hex0_result),
	.hex1(hex1),
	.hex1_result(hex1_result),
	.hex2(hex2),
	.hex2_result(hex2_result),
	.hex3(hex3),
	.hex3_result_sign(hex3_result_sign),
	.ledg(ledg),
	.ledr(ledr),
	.operation_overflow(operation_overflow),
	.operation_result(operation_result),
	.operator(operator),
	.pwm_out(pwm_out),
	.pwm_out_vector(pwm_out_vector),
	.second_operand(second_operand),
	.set_operator(set_operator),
	.stack_pop(stack_pop),
	.stack_push(stack_push),
	.stack_push_value(stack_push_value),
	.sampler_rx(sampler)
);
endmodule

