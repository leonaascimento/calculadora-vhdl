// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/16/2018 00:59:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controller_vlg_sample_tst(
	clk,
	enter,
	equals,
	operand,
	operator,
	reset,
	result,
	sampler_tx
);
input  clk;
input  enter;
input  equals;
input [7:0] operand;
input [1:0] operator;
input  reset;
input [7:0] result;
output sampler_tx;

reg sample;
time current_time;
always @(clk or enter or equals or operand or operator or reset or result)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module controller_vlg_check_tst (
	pop,
	push,
	push_value,
	sampler_rx
);
input  pop;
input  push;
input [7:0] push_value;
input sampler_rx;

reg  pop_expected;
reg  push_expected;
reg [7:0] push_value_expected;

reg  pop_prev;
reg  push_prev;
reg [7:0] push_value_prev;

reg  pop_expected_prev;
reg  push_expected_prev;
reg [7:0] push_value_expected_prev;

reg  last_pop_exp;
reg  last_push_exp;
reg [7:0] last_push_value_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	pop_prev = pop;
	push_prev = push;
	push_value_prev = push_value;
end

// update expected /o prevs

always @(trigger)
begin
	pop_expected_prev = pop_expected;
	push_expected_prev = push_expected;
	push_value_expected_prev = push_value_expected;
end



// expected pop
initial
begin
	pop_expected = 1'bX;
end 

// expected push
initial
begin
	push_expected = 1'bX;
end 
// expected push_value[ 7 ]
initial
begin
	push_value_expected[7] = 1'bX;
end 
// expected push_value[ 6 ]
initial
begin
	push_value_expected[6] = 1'bX;
end 
// expected push_value[ 5 ]
initial
begin
	push_value_expected[5] = 1'bX;
end 
// expected push_value[ 4 ]
initial
begin
	push_value_expected[4] = 1'bX;
end 
// expected push_value[ 3 ]
initial
begin
	push_value_expected[3] = 1'bX;
end 
// expected push_value[ 2 ]
initial
begin
	push_value_expected[2] = 1'bX;
end 
// expected push_value[ 1 ]
initial
begin
	push_value_expected[1] = 1'bX;
end 
// expected push_value[ 0 ]
initial
begin
	push_value_expected[0] = 1'bX;
end 
// generate trigger
always @(pop_expected or pop or push_expected or push or push_value_expected or push_value)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pop = %b | expected push = %b | expected push_value = %b | ",pop_expected_prev,push_expected_prev,push_value_expected_prev);
	$display("| real pop = %b | real push = %b | real push_value = %b | ",pop_prev,push_prev,push_value_prev);
`endif
	if (
		( pop_expected_prev !== 1'bx ) && ( pop_prev !== pop_expected_prev )
		&& ((pop_expected_prev !== last_pop_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pop :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pop_expected_prev);
		$display ("     Real value = %b", pop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pop_exp = pop_expected_prev;
	end
	if (
		( push_expected_prev !== 1'bx ) && ( push_prev !== push_expected_prev )
		&& ((push_expected_prev !== last_push_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port push :: @time = %t",  $realtime);
		$display ("     Expected value = %b", push_expected_prev);
		$display ("     Real value = %b", push_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_push_exp = push_expected_prev;
	end
	if (
		( push_value_expected_prev[0] !== 1'bx ) && ( push_value_prev[0] !== push_value_expected_prev[0] )
		&& ((push_value_expected_prev[0] !== last_push_value_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port push_value[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", push_value_expected_prev);
		$display ("     Real value = %b", push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_push_value_exp[0] = push_value_expected_prev[0];
	end
	if (
		( push_value_expected_prev[1] !== 1'bx ) && ( push_value_prev[1] !== push_value_expected_prev[1] )
		&& ((push_value_expected_prev[1] !== last_push_value_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port push_value[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", push_value_expected_prev);
		$display ("     Real value = %b", push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_push_value_exp[1] = push_value_expected_prev[1];
	end
	if (
		( push_value_expected_prev[2] !== 1'bx ) && ( push_value_prev[2] !== push_value_expected_prev[2] )
		&& ((push_value_expected_prev[2] !== last_push_value_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port push_value[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", push_value_expected_prev);
		$display ("     Real value = %b", push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_push_value_exp[2] = push_value_expected_prev[2];
	end
	if (
		( push_value_expected_prev[3] !== 1'bx ) && ( push_value_prev[3] !== push_value_expected_prev[3] )
		&& ((push_value_expected_prev[3] !== last_push_value_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port push_value[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", push_value_expected_prev);
		$display ("     Real value = %b", push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_push_value_exp[3] = push_value_expected_prev[3];
	end
	if (
		( push_value_expected_prev[4] !== 1'bx ) && ( push_value_prev[4] !== push_value_expected_prev[4] )
		&& ((push_value_expected_prev[4] !== last_push_value_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port push_value[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", push_value_expected_prev);
		$display ("     Real value = %b", push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_push_value_exp[4] = push_value_expected_prev[4];
	end
	if (
		( push_value_expected_prev[5] !== 1'bx ) && ( push_value_prev[5] !== push_value_expected_prev[5] )
		&& ((push_value_expected_prev[5] !== last_push_value_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port push_value[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", push_value_expected_prev);
		$display ("     Real value = %b", push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_push_value_exp[5] = push_value_expected_prev[5];
	end
	if (
		( push_value_expected_prev[6] !== 1'bx ) && ( push_value_prev[6] !== push_value_expected_prev[6] )
		&& ((push_value_expected_prev[6] !== last_push_value_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port push_value[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", push_value_expected_prev);
		$display ("     Real value = %b", push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_push_value_exp[6] = push_value_expected_prev[6];
	end
	if (
		( push_value_expected_prev[7] !== 1'bx ) && ( push_value_prev[7] !== push_value_expected_prev[7] )
		&& ((push_value_expected_prev[7] !== last_push_value_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port push_value[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", push_value_expected_prev);
		$display ("     Real value = %b", push_value_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_push_value_exp[7] = push_value_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enter;
reg equals;
reg [7:0] operand;
reg [1:0] operator;
reg reset;
reg [7:0] result;
// wires                                               
wire pop;
wire push;
wire [7:0] push_value;

wire sampler;                             

// assign statements (if any)                          
controller i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.enter(enter),
	.equals(equals),
	.operand(operand),
	.operator(operator),
	.pop(pop),
	.push(push),
	.push_value(push_value),
	.reset(reset),
	.result(result)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// enter
initial
begin
	enter = 1'b0;
	enter = #20000 1'b1;
	enter = #10000 1'b0;
	enter = #20000 1'b1;
	enter = #10000 1'b0;
end 

// equals
initial
begin
	equals = 1'b0;
	equals = #110000 1'b1;
	equals = #10000 1'b0;
	equals = #20000 1'b1;
	equals = #10000 1'b0;
end 
// operand[ 7 ]
initial
begin
	operand[7] = 1'b0;
end 
// operand[ 6 ]
initial
begin
	operand[6] = 1'b0;
end 
// operand[ 5 ]
initial
begin
	operand[5] = 1'b0;
end 
// operand[ 4 ]
initial
begin
	operand[4] = 1'b0;
	operand[4] = #40000 1'b1;
	operand[4] = #20000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #40000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #40000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #60000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #20000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #80000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #20000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #20000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #40000 1'b0;
	operand[4] = #40000 1'b1;
	operand[4] = #20000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #60000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #80000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #20000 1'b0;
	operand[4] = #40000 1'b1;
	operand[4] = #20000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #20000 1'b0;
	operand[4] = #20000 1'b1;
	operand[4] = #20000 1'b0;
	operand[4] = #20000 1'b1;
end 
// operand[ 3 ]
initial
begin
	operand[3] = 1'b1;
	operand[3] = #20000 1'b0;
	operand[3] = #60000 1'b1;
	operand[3] = #100000 1'b0;
	operand[3] = #20000 1'b1;
	operand[3] = #40000 1'b0;
	operand[3] = #20000 1'b1;
	operand[3] = #20000 1'b0;
	operand[3] = #20000 1'b1;
	operand[3] = #20000 1'b0;
	operand[3] = #20000 1'b1;
	operand[3] = #40000 1'b0;
	operand[3] = #20000 1'b1;
	operand[3] = #20000 1'b0;
	operand[3] = #40000 1'b1;
	operand[3] = #20000 1'b0;
	operand[3] = #20000 1'b1;
	operand[3] = #40000 1'b0;
	operand[3] = #60000 1'b1;
	operand[3] = #20000 1'b0;
	operand[3] = #20000 1'b1;
	operand[3] = #20000 1'b0;
	operand[3] = #20000 1'b1;
	operand[3] = #40000 1'b0;
	operand[3] = #20000 1'b1;
	operand[3] = #80000 1'b0;
	operand[3] = #20000 1'b1;
	operand[3] = #40000 1'b0;
	operand[3] = #20000 1'b1;
	operand[3] = #40000 1'b0;
end 
// operand[ 2 ]
initial
begin
	operand[2] = 1'b1;
	operand[2] = #20000 1'b0;
	operand[2] = #120000 1'b1;
	operand[2] = #40000 1'b0;
	operand[2] = #80000 1'b1;
	operand[2] = #20000 1'b0;
	operand[2] = #40000 1'b1;
	operand[2] = #40000 1'b0;
	operand[2] = #20000 1'b1;
	operand[2] = #20000 1'b0;
	operand[2] = #20000 1'b1;
	operand[2] = #20000 1'b0;
	operand[2] = #20000 1'b1;
	operand[2] = #20000 1'b0;
	operand[2] = #60000 1'b1;
	operand[2] = #20000 1'b0;
	operand[2] = #20000 1'b1;
	operand[2] = #60000 1'b0;
	operand[2] = #40000 1'b1;
	operand[2] = #40000 1'b0;
	operand[2] = #20000 1'b1;
	operand[2] = #20000 1'b0;
	operand[2] = #40000 1'b1;
	operand[2] = #20000 1'b0;
	operand[2] = #20000 1'b1;
	operand[2] = #20000 1'b0;
	operand[2] = #20000 1'b1;
	operand[2] = #20000 1'b0;
	operand[2] = #20000 1'b1;
	operand[2] = #40000 1'b0;
end 
// operand[ 1 ]
initial
begin
	operand[1] = 1'b0;
	operand[1] = #20000 1'b1;
	operand[1] = #80000 1'b0;
	operand[1] = #60000 1'b1;
	operand[1] = #20000 1'b0;
	operand[1] = #60000 1'b1;
	operand[1] = #40000 1'b0;
	operand[1] = #20000 1'b1;
	operand[1] = #20000 1'b0;
	operand[1] = #20000 1'b1;
	operand[1] = #20000 1'b0;
	operand[1] = #20000 1'b1;
	operand[1] = #20000 1'b0;
	operand[1] = #20000 1'b1;
	operand[1] = #60000 1'b0;
	operand[1] = #60000 1'b1;
	operand[1] = #100000 1'b0;
	operand[1] = #20000 1'b1;
	operand[1] = #20000 1'b0;
	operand[1] = #20000 1'b1;
	operand[1] = #60000 1'b0;
	operand[1] = #40000 1'b1;
	operand[1] = #20000 1'b0;
	operand[1] = #20000 1'b1;
	operand[1] = #80000 1'b0;
	operand[1] = #20000 1'b1;
	operand[1] = #40000 1'b0;
end 
// operand[ 0 ]
initial
begin
	operand[0] = 1'b0;
	operand[0] = #40000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #40000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #20000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #120000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #20000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #20000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #160000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #60000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #40000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #80000 1'b1;
	operand[0] = #40000 1'b0;
	operand[0] = #20000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #40000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #20000 1'b1;
	operand[0] = #20000 1'b0;
	operand[0] = #20000 1'b1;
end 
// operator[ 1 ]
initial
begin
	operator[1] = 1'b0;
end 
// operator[ 0 ]
initial
begin
	operator[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// result[ 7 ]
initial
begin
	result[7] = 1'b0;
end 
// result[ 6 ]
initial
begin
	result[6] = 1'b0;
end 
// result[ 5 ]
initial
begin
	result[5] = 1'b0;
end 
// result[ 4 ]
initial
begin
	result[4] = 1'b0;
end 
// result[ 3 ]
initial
begin
	result[3] = 1'b0;
end 
// result[ 2 ]
initial
begin
	result[2] = 1'b0;
end 
// result[ 1 ]
initial
begin
	result[1] = 1'b0;
end 
// result[ 0 ]
initial
begin
	result[0] = 1'b0;
end 

controller_vlg_sample_tst tb_sample (
	.clk(clk),
	.enter(enter),
	.equals(equals),
	.operand(operand),
	.operator(operator),
	.reset(reset),
	.result(result),
	.sampler_tx(sampler)
);

controller_vlg_check_tst tb_out(
	.pop(pop),
	.push(push),
	.push_value(push_value),
	.sampler_rx(sampler)
);
endmodule

