// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/19/2018 12:51:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    multiplier
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multiplier_vlg_sample_tst(
	first,
	second,
	sampler_tx
);
input [7:0] first;
input [7:0] second;
output sampler_tx;

reg sample;
time current_time;
always @(first or second)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module multiplier_vlg_check_tst (
	aux_A,
	aux_P,
	aux_result,
	aux_S,
	overflow,
	result,
	sampler_rx
);
input [16:0] aux_A;
input [16:0] aux_P;
input [15:0] aux_result;
input [16:0] aux_S;
input  overflow;
input [7:0] result;
input sampler_rx;

reg [16:0] aux_A_expected;
reg [16:0] aux_P_expected;
reg [15:0] aux_result_expected;
reg [16:0] aux_S_expected;
reg  overflow_expected;
reg [7:0] result_expected;

reg [16:0] aux_A_prev;
reg [16:0] aux_P_prev;
reg [15:0] aux_result_prev;
reg [16:0] aux_S_prev;
reg  overflow_prev;
reg [7:0] result_prev;

reg [16:0] aux_A_expected_prev;
reg [16:0] aux_P_expected_prev;
reg [15:0] aux_result_expected_prev;
reg [16:0] aux_S_expected_prev;
reg  overflow_expected_prev;
reg [7:0] result_expected_prev;

reg [16:0] last_aux_A_exp;
reg [16:0] last_aux_P_exp;
reg [15:0] last_aux_result_exp;
reg [16:0] last_aux_S_exp;
reg  last_overflow_exp;
reg [7:0] last_result_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	aux_A_prev = aux_A;
	aux_P_prev = aux_P;
	aux_result_prev = aux_result;
	aux_S_prev = aux_S;
	overflow_prev = overflow;
	result_prev = result;
end

// update expected /o prevs

always @(trigger)
begin
	aux_A_expected_prev = aux_A_expected;
	aux_P_expected_prev = aux_P_expected;
	aux_result_expected_prev = aux_result_expected;
	aux_S_expected_prev = aux_S_expected;
	overflow_expected_prev = overflow_expected;
	result_expected_prev = result_expected;
end


// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 

// expected overflow
initial
begin
	overflow_expected = 1'bX;
end 
// expected aux_result[ 15 ]
initial
begin
	aux_result_expected[15] = 1'bX;
end 
// expected aux_result[ 14 ]
initial
begin
	aux_result_expected[14] = 1'bX;
end 
// expected aux_result[ 13 ]
initial
begin
	aux_result_expected[13] = 1'bX;
end 
// expected aux_result[ 12 ]
initial
begin
	aux_result_expected[12] = 1'bX;
end 
// expected aux_result[ 11 ]
initial
begin
	aux_result_expected[11] = 1'bX;
end 
// expected aux_result[ 10 ]
initial
begin
	aux_result_expected[10] = 1'bX;
end 
// expected aux_result[ 9 ]
initial
begin
	aux_result_expected[9] = 1'bX;
end 
// expected aux_result[ 8 ]
initial
begin
	aux_result_expected[8] = 1'bX;
end 
// expected aux_result[ 7 ]
initial
begin
	aux_result_expected[7] = 1'bX;
end 
// expected aux_result[ 6 ]
initial
begin
	aux_result_expected[6] = 1'bX;
end 
// expected aux_result[ 5 ]
initial
begin
	aux_result_expected[5] = 1'bX;
end 
// expected aux_result[ 4 ]
initial
begin
	aux_result_expected[4] = 1'bX;
end 
// expected aux_result[ 3 ]
initial
begin
	aux_result_expected[3] = 1'bX;
end 
// expected aux_result[ 2 ]
initial
begin
	aux_result_expected[2] = 1'bX;
end 
// expected aux_result[ 1 ]
initial
begin
	aux_result_expected[1] = 1'bX;
end 
// expected aux_result[ 0 ]
initial
begin
	aux_result_expected[0] = 1'bX;
end 
// expected aux_A[ 16 ]
initial
begin
	aux_A_expected[16] = 1'bX;
end 
// expected aux_A[ 15 ]
initial
begin
	aux_A_expected[15] = 1'bX;
end 
// expected aux_A[ 14 ]
initial
begin
	aux_A_expected[14] = 1'bX;
end 
// expected aux_A[ 13 ]
initial
begin
	aux_A_expected[13] = 1'bX;
end 
// expected aux_A[ 12 ]
initial
begin
	aux_A_expected[12] = 1'bX;
end 
// expected aux_A[ 11 ]
initial
begin
	aux_A_expected[11] = 1'bX;
end 
// expected aux_A[ 10 ]
initial
begin
	aux_A_expected[10] = 1'bX;
end 
// expected aux_A[ 9 ]
initial
begin
	aux_A_expected[9] = 1'bX;
end 
// expected aux_A[ 8 ]
initial
begin
	aux_A_expected[8] = 1'bX;
end 
// expected aux_A[ 7 ]
initial
begin
	aux_A_expected[7] = 1'bX;
end 
// expected aux_A[ 6 ]
initial
begin
	aux_A_expected[6] = 1'bX;
end 
// expected aux_A[ 5 ]
initial
begin
	aux_A_expected[5] = 1'bX;
end 
// expected aux_A[ 4 ]
initial
begin
	aux_A_expected[4] = 1'bX;
end 
// expected aux_A[ 3 ]
initial
begin
	aux_A_expected[3] = 1'bX;
end 
// expected aux_A[ 2 ]
initial
begin
	aux_A_expected[2] = 1'bX;
end 
// expected aux_A[ 1 ]
initial
begin
	aux_A_expected[1] = 1'bX;
end 
// expected aux_A[ 0 ]
initial
begin
	aux_A_expected[0] = 1'bX;
end 
// expected aux_S[ 16 ]
initial
begin
	aux_S_expected[16] = 1'bX;
end 
// expected aux_S[ 15 ]
initial
begin
	aux_S_expected[15] = 1'bX;
end 
// expected aux_S[ 14 ]
initial
begin
	aux_S_expected[14] = 1'bX;
end 
// expected aux_S[ 13 ]
initial
begin
	aux_S_expected[13] = 1'bX;
end 
// expected aux_S[ 12 ]
initial
begin
	aux_S_expected[12] = 1'bX;
end 
// expected aux_S[ 11 ]
initial
begin
	aux_S_expected[11] = 1'bX;
end 
// expected aux_S[ 10 ]
initial
begin
	aux_S_expected[10] = 1'bX;
end 
// expected aux_S[ 9 ]
initial
begin
	aux_S_expected[9] = 1'bX;
end 
// expected aux_S[ 8 ]
initial
begin
	aux_S_expected[8] = 1'bX;
end 
// expected aux_S[ 7 ]
initial
begin
	aux_S_expected[7] = 1'bX;
end 
// expected aux_S[ 6 ]
initial
begin
	aux_S_expected[6] = 1'bX;
end 
// expected aux_S[ 5 ]
initial
begin
	aux_S_expected[5] = 1'bX;
end 
// expected aux_S[ 4 ]
initial
begin
	aux_S_expected[4] = 1'bX;
end 
// expected aux_S[ 3 ]
initial
begin
	aux_S_expected[3] = 1'bX;
end 
// expected aux_S[ 2 ]
initial
begin
	aux_S_expected[2] = 1'bX;
end 
// expected aux_S[ 1 ]
initial
begin
	aux_S_expected[1] = 1'bX;
end 
// expected aux_S[ 0 ]
initial
begin
	aux_S_expected[0] = 1'bX;
end 
// expected aux_P[ 16 ]
initial
begin
	aux_P_expected[16] = 1'bX;
end 
// expected aux_P[ 15 ]
initial
begin
	aux_P_expected[15] = 1'bX;
end 
// expected aux_P[ 14 ]
initial
begin
	aux_P_expected[14] = 1'bX;
end 
// expected aux_P[ 13 ]
initial
begin
	aux_P_expected[13] = 1'bX;
end 
// expected aux_P[ 12 ]
initial
begin
	aux_P_expected[12] = 1'bX;
end 
// expected aux_P[ 11 ]
initial
begin
	aux_P_expected[11] = 1'bX;
end 
// expected aux_P[ 10 ]
initial
begin
	aux_P_expected[10] = 1'bX;
end 
// expected aux_P[ 9 ]
initial
begin
	aux_P_expected[9] = 1'bX;
end 
// expected aux_P[ 8 ]
initial
begin
	aux_P_expected[8] = 1'bX;
end 
// expected aux_P[ 7 ]
initial
begin
	aux_P_expected[7] = 1'bX;
end 
// expected aux_P[ 6 ]
initial
begin
	aux_P_expected[6] = 1'bX;
end 
// expected aux_P[ 5 ]
initial
begin
	aux_P_expected[5] = 1'bX;
end 
// expected aux_P[ 4 ]
initial
begin
	aux_P_expected[4] = 1'bX;
end 
// expected aux_P[ 3 ]
initial
begin
	aux_P_expected[3] = 1'bX;
end 
// expected aux_P[ 2 ]
initial
begin
	aux_P_expected[2] = 1'bX;
end 
// expected aux_P[ 1 ]
initial
begin
	aux_P_expected[1] = 1'bX;
end 
// expected aux_P[ 0 ]
initial
begin
	aux_P_expected[0] = 1'bX;
end 
// generate trigger
always @(aux_A_expected or aux_A or aux_P_expected or aux_P or aux_result_expected or aux_result or aux_S_expected or aux_S or overflow_expected or overflow or result_expected or result)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aux_A = %b | expected aux_P = %b | expected aux_result = %b | expected aux_S = %b | expected overflow = %b | expected result = %b | ",aux_A_expected_prev,aux_P_expected_prev,aux_result_expected_prev,aux_S_expected_prev,overflow_expected_prev,result_expected_prev);
	$display("| real aux_A = %b | real aux_P = %b | real aux_result = %b | real aux_S = %b | real overflow = %b | real result = %b | ",aux_A_prev,aux_P_prev,aux_result_prev,aux_S_prev,overflow_prev,result_prev);
`endif
	if (
		( aux_A_expected_prev[0] !== 1'bx ) && ( aux_A_prev[0] !== aux_A_expected_prev[0] )
		&& ((aux_A_expected_prev[0] !== last_aux_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[0] = aux_A_expected_prev[0];
	end
	if (
		( aux_A_expected_prev[1] !== 1'bx ) && ( aux_A_prev[1] !== aux_A_expected_prev[1] )
		&& ((aux_A_expected_prev[1] !== last_aux_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[1] = aux_A_expected_prev[1];
	end
	if (
		( aux_A_expected_prev[2] !== 1'bx ) && ( aux_A_prev[2] !== aux_A_expected_prev[2] )
		&& ((aux_A_expected_prev[2] !== last_aux_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[2] = aux_A_expected_prev[2];
	end
	if (
		( aux_A_expected_prev[3] !== 1'bx ) && ( aux_A_prev[3] !== aux_A_expected_prev[3] )
		&& ((aux_A_expected_prev[3] !== last_aux_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[3] = aux_A_expected_prev[3];
	end
	if (
		( aux_A_expected_prev[4] !== 1'bx ) && ( aux_A_prev[4] !== aux_A_expected_prev[4] )
		&& ((aux_A_expected_prev[4] !== last_aux_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[4] = aux_A_expected_prev[4];
	end
	if (
		( aux_A_expected_prev[5] !== 1'bx ) && ( aux_A_prev[5] !== aux_A_expected_prev[5] )
		&& ((aux_A_expected_prev[5] !== last_aux_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[5] = aux_A_expected_prev[5];
	end
	if (
		( aux_A_expected_prev[6] !== 1'bx ) && ( aux_A_prev[6] !== aux_A_expected_prev[6] )
		&& ((aux_A_expected_prev[6] !== last_aux_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[6] = aux_A_expected_prev[6];
	end
	if (
		( aux_A_expected_prev[7] !== 1'bx ) && ( aux_A_prev[7] !== aux_A_expected_prev[7] )
		&& ((aux_A_expected_prev[7] !== last_aux_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[7] = aux_A_expected_prev[7];
	end
	if (
		( aux_A_expected_prev[8] !== 1'bx ) && ( aux_A_prev[8] !== aux_A_expected_prev[8] )
		&& ((aux_A_expected_prev[8] !== last_aux_A_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[8] = aux_A_expected_prev[8];
	end
	if (
		( aux_A_expected_prev[9] !== 1'bx ) && ( aux_A_prev[9] !== aux_A_expected_prev[9] )
		&& ((aux_A_expected_prev[9] !== last_aux_A_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[9] = aux_A_expected_prev[9];
	end
	if (
		( aux_A_expected_prev[10] !== 1'bx ) && ( aux_A_prev[10] !== aux_A_expected_prev[10] )
		&& ((aux_A_expected_prev[10] !== last_aux_A_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[10] = aux_A_expected_prev[10];
	end
	if (
		( aux_A_expected_prev[11] !== 1'bx ) && ( aux_A_prev[11] !== aux_A_expected_prev[11] )
		&& ((aux_A_expected_prev[11] !== last_aux_A_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[11] = aux_A_expected_prev[11];
	end
	if (
		( aux_A_expected_prev[12] !== 1'bx ) && ( aux_A_prev[12] !== aux_A_expected_prev[12] )
		&& ((aux_A_expected_prev[12] !== last_aux_A_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[12] = aux_A_expected_prev[12];
	end
	if (
		( aux_A_expected_prev[13] !== 1'bx ) && ( aux_A_prev[13] !== aux_A_expected_prev[13] )
		&& ((aux_A_expected_prev[13] !== last_aux_A_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[13] = aux_A_expected_prev[13];
	end
	if (
		( aux_A_expected_prev[14] !== 1'bx ) && ( aux_A_prev[14] !== aux_A_expected_prev[14] )
		&& ((aux_A_expected_prev[14] !== last_aux_A_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[14] = aux_A_expected_prev[14];
	end
	if (
		( aux_A_expected_prev[15] !== 1'bx ) && ( aux_A_prev[15] !== aux_A_expected_prev[15] )
		&& ((aux_A_expected_prev[15] !== last_aux_A_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[15] = aux_A_expected_prev[15];
	end
	if (
		( aux_A_expected_prev[16] !== 1'bx ) && ( aux_A_prev[16] !== aux_A_expected_prev[16] )
		&& ((aux_A_expected_prev[16] !== last_aux_A_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_A[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_A_expected_prev);
		$display ("     Real value = %b", aux_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aux_A_exp[16] = aux_A_expected_prev[16];
	end
	if (
		( aux_P_expected_prev[0] !== 1'bx ) && ( aux_P_prev[0] !== aux_P_expected_prev[0] )
		&& ((aux_P_expected_prev[0] !== last_aux_P_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[0] = aux_P_expected_prev[0];
	end
	if (
		( aux_P_expected_prev[1] !== 1'bx ) && ( aux_P_prev[1] !== aux_P_expected_prev[1] )
		&& ((aux_P_expected_prev[1] !== last_aux_P_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[1] = aux_P_expected_prev[1];
	end
	if (
		( aux_P_expected_prev[2] !== 1'bx ) && ( aux_P_prev[2] !== aux_P_expected_prev[2] )
		&& ((aux_P_expected_prev[2] !== last_aux_P_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[2] = aux_P_expected_prev[2];
	end
	if (
		( aux_P_expected_prev[3] !== 1'bx ) && ( aux_P_prev[3] !== aux_P_expected_prev[3] )
		&& ((aux_P_expected_prev[3] !== last_aux_P_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[3] = aux_P_expected_prev[3];
	end
	if (
		( aux_P_expected_prev[4] !== 1'bx ) && ( aux_P_prev[4] !== aux_P_expected_prev[4] )
		&& ((aux_P_expected_prev[4] !== last_aux_P_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[4] = aux_P_expected_prev[4];
	end
	if (
		( aux_P_expected_prev[5] !== 1'bx ) && ( aux_P_prev[5] !== aux_P_expected_prev[5] )
		&& ((aux_P_expected_prev[5] !== last_aux_P_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[5] = aux_P_expected_prev[5];
	end
	if (
		( aux_P_expected_prev[6] !== 1'bx ) && ( aux_P_prev[6] !== aux_P_expected_prev[6] )
		&& ((aux_P_expected_prev[6] !== last_aux_P_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[6] = aux_P_expected_prev[6];
	end
	if (
		( aux_P_expected_prev[7] !== 1'bx ) && ( aux_P_prev[7] !== aux_P_expected_prev[7] )
		&& ((aux_P_expected_prev[7] !== last_aux_P_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[7] = aux_P_expected_prev[7];
	end
	if (
		( aux_P_expected_prev[8] !== 1'bx ) && ( aux_P_prev[8] !== aux_P_expected_prev[8] )
		&& ((aux_P_expected_prev[8] !== last_aux_P_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[8] = aux_P_expected_prev[8];
	end
	if (
		( aux_P_expected_prev[9] !== 1'bx ) && ( aux_P_prev[9] !== aux_P_expected_prev[9] )
		&& ((aux_P_expected_prev[9] !== last_aux_P_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[9] = aux_P_expected_prev[9];
	end
	if (
		( aux_P_expected_prev[10] !== 1'bx ) && ( aux_P_prev[10] !== aux_P_expected_prev[10] )
		&& ((aux_P_expected_prev[10] !== last_aux_P_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[10] = aux_P_expected_prev[10];
	end
	if (
		( aux_P_expected_prev[11] !== 1'bx ) && ( aux_P_prev[11] !== aux_P_expected_prev[11] )
		&& ((aux_P_expected_prev[11] !== last_aux_P_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[11] = aux_P_expected_prev[11];
	end
	if (
		( aux_P_expected_prev[12] !== 1'bx ) && ( aux_P_prev[12] !== aux_P_expected_prev[12] )
		&& ((aux_P_expected_prev[12] !== last_aux_P_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[12] = aux_P_expected_prev[12];
	end
	if (
		( aux_P_expected_prev[13] !== 1'bx ) && ( aux_P_prev[13] !== aux_P_expected_prev[13] )
		&& ((aux_P_expected_prev[13] !== last_aux_P_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[13] = aux_P_expected_prev[13];
	end
	if (
		( aux_P_expected_prev[14] !== 1'bx ) && ( aux_P_prev[14] !== aux_P_expected_prev[14] )
		&& ((aux_P_expected_prev[14] !== last_aux_P_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[14] = aux_P_expected_prev[14];
	end
	if (
		( aux_P_expected_prev[15] !== 1'bx ) && ( aux_P_prev[15] !== aux_P_expected_prev[15] )
		&& ((aux_P_expected_prev[15] !== last_aux_P_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[15] = aux_P_expected_prev[15];
	end
	if (
		( aux_P_expected_prev[16] !== 1'bx ) && ( aux_P_prev[16] !== aux_P_expected_prev[16] )
		&& ((aux_P_expected_prev[16] !== last_aux_P_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_P[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_P_expected_prev);
		$display ("     Real value = %b", aux_P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_aux_P_exp[16] = aux_P_expected_prev[16];
	end
	if (
		( aux_result_expected_prev[0] !== 1'bx ) && ( aux_result_prev[0] !== aux_result_expected_prev[0] )
		&& ((aux_result_expected_prev[0] !== last_aux_result_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[0] = aux_result_expected_prev[0];
	end
	if (
		( aux_result_expected_prev[1] !== 1'bx ) && ( aux_result_prev[1] !== aux_result_expected_prev[1] )
		&& ((aux_result_expected_prev[1] !== last_aux_result_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[1] = aux_result_expected_prev[1];
	end
	if (
		( aux_result_expected_prev[2] !== 1'bx ) && ( aux_result_prev[2] !== aux_result_expected_prev[2] )
		&& ((aux_result_expected_prev[2] !== last_aux_result_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[2] = aux_result_expected_prev[2];
	end
	if (
		( aux_result_expected_prev[3] !== 1'bx ) && ( aux_result_prev[3] !== aux_result_expected_prev[3] )
		&& ((aux_result_expected_prev[3] !== last_aux_result_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[3] = aux_result_expected_prev[3];
	end
	if (
		( aux_result_expected_prev[4] !== 1'bx ) && ( aux_result_prev[4] !== aux_result_expected_prev[4] )
		&& ((aux_result_expected_prev[4] !== last_aux_result_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[4] = aux_result_expected_prev[4];
	end
	if (
		( aux_result_expected_prev[5] !== 1'bx ) && ( aux_result_prev[5] !== aux_result_expected_prev[5] )
		&& ((aux_result_expected_prev[5] !== last_aux_result_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[5] = aux_result_expected_prev[5];
	end
	if (
		( aux_result_expected_prev[6] !== 1'bx ) && ( aux_result_prev[6] !== aux_result_expected_prev[6] )
		&& ((aux_result_expected_prev[6] !== last_aux_result_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[6] = aux_result_expected_prev[6];
	end
	if (
		( aux_result_expected_prev[7] !== 1'bx ) && ( aux_result_prev[7] !== aux_result_expected_prev[7] )
		&& ((aux_result_expected_prev[7] !== last_aux_result_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[7] = aux_result_expected_prev[7];
	end
	if (
		( aux_result_expected_prev[8] !== 1'bx ) && ( aux_result_prev[8] !== aux_result_expected_prev[8] )
		&& ((aux_result_expected_prev[8] !== last_aux_result_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[8] = aux_result_expected_prev[8];
	end
	if (
		( aux_result_expected_prev[9] !== 1'bx ) && ( aux_result_prev[9] !== aux_result_expected_prev[9] )
		&& ((aux_result_expected_prev[9] !== last_aux_result_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[9] = aux_result_expected_prev[9];
	end
	if (
		( aux_result_expected_prev[10] !== 1'bx ) && ( aux_result_prev[10] !== aux_result_expected_prev[10] )
		&& ((aux_result_expected_prev[10] !== last_aux_result_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[10] = aux_result_expected_prev[10];
	end
	if (
		( aux_result_expected_prev[11] !== 1'bx ) && ( aux_result_prev[11] !== aux_result_expected_prev[11] )
		&& ((aux_result_expected_prev[11] !== last_aux_result_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[11] = aux_result_expected_prev[11];
	end
	if (
		( aux_result_expected_prev[12] !== 1'bx ) && ( aux_result_prev[12] !== aux_result_expected_prev[12] )
		&& ((aux_result_expected_prev[12] !== last_aux_result_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[12] = aux_result_expected_prev[12];
	end
	if (
		( aux_result_expected_prev[13] !== 1'bx ) && ( aux_result_prev[13] !== aux_result_expected_prev[13] )
		&& ((aux_result_expected_prev[13] !== last_aux_result_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[13] = aux_result_expected_prev[13];
	end
	if (
		( aux_result_expected_prev[14] !== 1'bx ) && ( aux_result_prev[14] !== aux_result_expected_prev[14] )
		&& ((aux_result_expected_prev[14] !== last_aux_result_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[14] = aux_result_expected_prev[14];
	end
	if (
		( aux_result_expected_prev[15] !== 1'bx ) && ( aux_result_prev[15] !== aux_result_expected_prev[15] )
		&& ((aux_result_expected_prev[15] !== last_aux_result_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_result_expected_prev);
		$display ("     Real value = %b", aux_result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_aux_result_exp[15] = aux_result_expected_prev[15];
	end
	if (
		( aux_S_expected_prev[0] !== 1'bx ) && ( aux_S_prev[0] !== aux_S_expected_prev[0] )
		&& ((aux_S_expected_prev[0] !== last_aux_S_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[0] = aux_S_expected_prev[0];
	end
	if (
		( aux_S_expected_prev[1] !== 1'bx ) && ( aux_S_prev[1] !== aux_S_expected_prev[1] )
		&& ((aux_S_expected_prev[1] !== last_aux_S_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[1] = aux_S_expected_prev[1];
	end
	if (
		( aux_S_expected_prev[2] !== 1'bx ) && ( aux_S_prev[2] !== aux_S_expected_prev[2] )
		&& ((aux_S_expected_prev[2] !== last_aux_S_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[2] = aux_S_expected_prev[2];
	end
	if (
		( aux_S_expected_prev[3] !== 1'bx ) && ( aux_S_prev[3] !== aux_S_expected_prev[3] )
		&& ((aux_S_expected_prev[3] !== last_aux_S_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[3] = aux_S_expected_prev[3];
	end
	if (
		( aux_S_expected_prev[4] !== 1'bx ) && ( aux_S_prev[4] !== aux_S_expected_prev[4] )
		&& ((aux_S_expected_prev[4] !== last_aux_S_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[4] = aux_S_expected_prev[4];
	end
	if (
		( aux_S_expected_prev[5] !== 1'bx ) && ( aux_S_prev[5] !== aux_S_expected_prev[5] )
		&& ((aux_S_expected_prev[5] !== last_aux_S_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[5] = aux_S_expected_prev[5];
	end
	if (
		( aux_S_expected_prev[6] !== 1'bx ) && ( aux_S_prev[6] !== aux_S_expected_prev[6] )
		&& ((aux_S_expected_prev[6] !== last_aux_S_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[6] = aux_S_expected_prev[6];
	end
	if (
		( aux_S_expected_prev[7] !== 1'bx ) && ( aux_S_prev[7] !== aux_S_expected_prev[7] )
		&& ((aux_S_expected_prev[7] !== last_aux_S_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[7] = aux_S_expected_prev[7];
	end
	if (
		( aux_S_expected_prev[8] !== 1'bx ) && ( aux_S_prev[8] !== aux_S_expected_prev[8] )
		&& ((aux_S_expected_prev[8] !== last_aux_S_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[8] = aux_S_expected_prev[8];
	end
	if (
		( aux_S_expected_prev[9] !== 1'bx ) && ( aux_S_prev[9] !== aux_S_expected_prev[9] )
		&& ((aux_S_expected_prev[9] !== last_aux_S_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[9] = aux_S_expected_prev[9];
	end
	if (
		( aux_S_expected_prev[10] !== 1'bx ) && ( aux_S_prev[10] !== aux_S_expected_prev[10] )
		&& ((aux_S_expected_prev[10] !== last_aux_S_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[10] = aux_S_expected_prev[10];
	end
	if (
		( aux_S_expected_prev[11] !== 1'bx ) && ( aux_S_prev[11] !== aux_S_expected_prev[11] )
		&& ((aux_S_expected_prev[11] !== last_aux_S_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[11] = aux_S_expected_prev[11];
	end
	if (
		( aux_S_expected_prev[12] !== 1'bx ) && ( aux_S_prev[12] !== aux_S_expected_prev[12] )
		&& ((aux_S_expected_prev[12] !== last_aux_S_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[12] = aux_S_expected_prev[12];
	end
	if (
		( aux_S_expected_prev[13] !== 1'bx ) && ( aux_S_prev[13] !== aux_S_expected_prev[13] )
		&& ((aux_S_expected_prev[13] !== last_aux_S_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[13] = aux_S_expected_prev[13];
	end
	if (
		( aux_S_expected_prev[14] !== 1'bx ) && ( aux_S_prev[14] !== aux_S_expected_prev[14] )
		&& ((aux_S_expected_prev[14] !== last_aux_S_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[14] = aux_S_expected_prev[14];
	end
	if (
		( aux_S_expected_prev[15] !== 1'bx ) && ( aux_S_prev[15] !== aux_S_expected_prev[15] )
		&& ((aux_S_expected_prev[15] !== last_aux_S_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[15] = aux_S_expected_prev[15];
	end
	if (
		( aux_S_expected_prev[16] !== 1'bx ) && ( aux_S_prev[16] !== aux_S_expected_prev[16] )
		&& ((aux_S_expected_prev[16] !== last_aux_S_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aux_S[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aux_S_expected_prev);
		$display ("     Real value = %b", aux_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_aux_S_exp[16] = aux_S_expected_prev[16];
	end
	if (
		( overflow_expected_prev !== 1'bx ) && ( overflow_prev !== overflow_expected_prev )
		&& ((overflow_expected_prev !== last_overflow_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", overflow_expected_prev);
		$display ("     Real value = %b", overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_overflow_exp = overflow_expected_prev;
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module multiplier_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] first;
reg [7:0] second;
// wires                                               
wire [16:0] aux_A;
wire [16:0] aux_P;
wire [15:0] aux_result;
wire [16:0] aux_S;
wire overflow;
wire [7:0] result;

wire sampler;                             

// assign statements (if any)                          
multiplier i1 (
// port map - connection between master ports and signals/registers   
	.aux_A(aux_A),
	.aux_P(aux_P),
	.aux_result(aux_result),
	.aux_S(aux_S),
	.first(first),
	.overflow(overflow),
	.result(result),
	.second(second)
);
// first[ 7 ]
initial
begin
	first[7] = 1'b0;
end 
// first[ 6 ]
initial
begin
	first[6] = 1'b0;
end 
// first[ 5 ]
initial
begin
	first[5] = 1'b0;
end 
// first[ 4 ]
initial
begin
	first[4] = 1'b0;
end 
// first[ 3 ]
initial
begin
	first[3] = 1'b0;
end 
// first[ 2 ]
initial
begin
	first[2] = 1'b0;
end 
// first[ 1 ]
initial
begin
	first[1] = 1'b1;
end 
// first[ 0 ]
initial
begin
	first[0] = 1'b1;
end 
// second[ 7 ]
initial
begin
	second[7] = 1'b1;
end 
// second[ 6 ]
initial
begin
	second[6] = 1'b1;
end 
// second[ 5 ]
initial
begin
	second[5] = 1'b0;
end 
// second[ 4 ]
initial
begin
	second[4] = 1'b1;
end 
// second[ 3 ]
initial
begin
	second[3] = 1'b1;
end 
// second[ 2 ]
initial
begin
	second[2] = 1'b1;
end 
// second[ 1 ]
initial
begin
	second[1] = 1'b0;
end 
// second[ 0 ]
initial
begin
	second[0] = 1'b0;
end 

multiplier_vlg_sample_tst tb_sample (
	.first(first),
	.second(second),
	.sampler_tx(sampler)
);

multiplier_vlg_check_tst tb_out(
	.aux_A(aux_A),
	.aux_P(aux_P),
	.aux_result(aux_result),
	.aux_S(aux_S),
	.overflow(overflow),
	.result(result),
	.sampler_rx(sampler)
);
endmodule

